/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// FulfillmentDataRequest
    /// </summary>
    [DataContract(Name = "FulfillmentDataRequest")]
    public partial class FulfillmentDataRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentDataRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentDataRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentDataRequest" /> class.
        /// </summary>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="takerAddress">Address of the intended account fulfilling the order (required).</param>
        /// <param name="fees">fees (required).</param>
        /// <param name="tokenId">Token ID for the ERC721 or ERC1155 token when fulfilling a collection order.</param>
        public FulfillmentDataRequest(Guid orderId = default(Guid), string takerAddress = default(string), List<Fee> fees = default(List<Fee>), string tokenId = default(string))
        {
            this.OrderId = orderId;
            // to ensure "takerAddress" is required (not null)
            if (takerAddress == null)
            {
                throw new ArgumentNullException("takerAddress is a required property for FulfillmentDataRequest and cannot be null");
            }
            this.TakerAddress = takerAddress;
            // to ensure "fees" is required (not null)
            if (fees == null)
            {
                throw new ArgumentNullException("fees is a required property for FulfillmentDataRequest and cannot be null");
            }
            this.Fees = fees;
            this.TokenId = tokenId;
        }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "order_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid OrderId { get; set; }

        /// <summary>
        /// Address of the intended account fulfilling the order
        /// </summary>
        /// <value>Address of the intended account fulfilling the order</value>
        /// <example>0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266</example>
        [DataMember(Name = "taker_address", IsRequired = true, EmitDefaultValue = true)]
        public string TakerAddress { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        /// <example>[{&quot;type&quot;:&quot;TAKER_ECOSYSTEM&quot;,&quot;amount&quot;:&quot;2250000000000000000&quot;,&quot;recipient_address&quot;:&quot;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233&quot;}]</example>
        [DataMember(Name = "fees", IsRequired = true, EmitDefaultValue = true)]
        public List<Fee> Fees { get; set; }

        /// <summary>
        /// Token ID for the ERC721 or ERC1155 token when fulfilling a collection order
        /// </summary>
        /// <value>Token ID for the ERC721 or ERC1155 token when fulfilling a collection order</value>
        /// <example>123</example>
        [DataMember(Name = "token_id", EmitDefaultValue = false)]
        public string TokenId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillmentDataRequest {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  TakerAddress: ").Append(TakerAddress).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
