/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// CancelOrdersResultData
    /// </summary>
    [DataContract(Name = "CancelOrdersResultData")]
    public partial class CancelOrdersResultData
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelOrdersResultData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CancelOrdersResultData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelOrdersResultData" /> class.
        /// </summary>
        /// <param name="successfulCancellations">Orders which were successfully cancelled (required).</param>
        /// <param name="pendingCancellations">Orders which are marked for cancellation but the cancellation cannot be guaranteed (required).</param>
        /// <param name="failedCancellations">Orders which failed to be cancelled (required).</param>
        public CancelOrdersResultData(List<string> successfulCancellations = default(List<string>), List<string> pendingCancellations = default(List<string>), List<FailedOrderCancellation> failedCancellations = default(List<FailedOrderCancellation>))
        {
            // to ensure "successfulCancellations" is required (not null)
            if (successfulCancellations == null)
            {
                throw new ArgumentNullException("successfulCancellations is a required property for CancelOrdersResultData and cannot be null");
            }
            this.SuccessfulCancellations = successfulCancellations;
            // to ensure "pendingCancellations" is required (not null)
            if (pendingCancellations == null)
            {
                throw new ArgumentNullException("pendingCancellations is a required property for CancelOrdersResultData and cannot be null");
            }
            this.PendingCancellations = pendingCancellations;
            // to ensure "failedCancellations" is required (not null)
            if (failedCancellations == null)
            {
                throw new ArgumentNullException("failedCancellations is a required property for CancelOrdersResultData and cannot be null");
            }
            this.FailedCancellations = failedCancellations;
        }

        /// <summary>
        /// Orders which were successfully cancelled
        /// </summary>
        /// <value>Orders which were successfully cancelled</value>
        [DataMember(Name = "successful_cancellations", IsRequired = true, EmitDefaultValue = true)]
        public List<string> SuccessfulCancellations { get; set; }

        /// <summary>
        /// Orders which are marked for cancellation but the cancellation cannot be guaranteed
        /// </summary>
        /// <value>Orders which are marked for cancellation but the cancellation cannot be guaranteed</value>
        [DataMember(Name = "pending_cancellations", IsRequired = true, EmitDefaultValue = true)]
        public List<string> PendingCancellations { get; set; }

        /// <summary>
        /// Orders which failed to be cancelled
        /// </summary>
        /// <value>Orders which failed to be cancelled</value>
        [DataMember(Name = "failed_cancellations", IsRequired = true, EmitDefaultValue = true)]
        public List<FailedOrderCancellation> FailedCancellations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CancelOrdersResultData {\n");
            sb.Append("  SuccessfulCancellations: ").Append(SuccessfulCancellations).Append("\n");
            sb.Append("  PendingCancellations: ").Append(PendingCancellations).Append("\n");
            sb.Append("  FailedCancellations: ").Append(FailedCancellations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
