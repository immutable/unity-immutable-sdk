/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// NFTMetadataAttribute
    /// </summary>
    [DataContract(Name = "NFTMetadataAttribute")]
    public partial class NFTMetadataAttribute
    {
        /// <summary>
        /// Display type for this attribute
        /// </summary>
        /// <value>Display type for this attribute</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DisplayTypeEnum
        {
            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 1,

            /// <summary>
            /// Enum BoostPercentage for value: boost_percentage
            /// </summary>
            [EnumMember(Value = "boost_percentage")]
            BoostPercentage = 2,

            /// <summary>
            /// Enum BoostNumber for value: boost_number
            /// </summary>
            [EnumMember(Value = "boost_number")]
            BoostNumber = 3,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 4
        }


        /// <summary>
        /// Display type for this attribute
        /// </summary>
        /// <value>Display type for this attribute</value>
        /// <example>number</example>
        [DataMember(Name = "display_type", EmitDefaultValue = true)]
        public DisplayTypeEnum? DisplayType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NFTMetadataAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NFTMetadataAttribute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NFTMetadataAttribute" /> class.
        /// </summary>
        /// <param name="displayType">Display type for this attribute.</param>
        /// <param name="traitType">The metadata trait type (required).</param>
        /// <param name="value">value (required).</param>
        public NFTMetadataAttribute(DisplayTypeEnum? displayType = default(DisplayTypeEnum?), string traitType = default(string), NFTMetadataAttributeValue value = default(NFTMetadataAttributeValue))
        {
            // to ensure "traitType" is required (not null)
            if (traitType == null)
            {
                throw new ArgumentNullException("traitType is a required property for NFTMetadataAttribute and cannot be null");
            }
            this.TraitType = traitType;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for NFTMetadataAttribute and cannot be null");
            }
            this.Value = value;
            this.DisplayType = displayType;
        }

        /// <summary>
        /// The metadata trait type
        /// </summary>
        /// <value>The metadata trait type</value>
        /// <example>Aqua Power</example>
        [DataMember(Name = "trait_type", IsRequired = true, EmitDefaultValue = true)]
        public string TraitType { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public NFTMetadataAttributeValue Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NFTMetadataAttribute {\n");
            sb.Append("  DisplayType: ").Append(DisplayType).Append("\n");
            sb.Append("  TraitType: ").Append(TraitType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
