/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// CreateBidRequestBody
    /// </summary>
    [DataContract(Name = "CreateBidRequestBody")]
    public partial class CreateBidRequestBody
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBidRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateBidRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBidRequestBody" /> class.
        /// </summary>
        /// <param name="accountAddress">accountAddress (required).</param>
        /// <param name="orderHash">orderHash (required).</param>
        /// <param name="buy">Buy item for bid should either be ERC721 or ERC1155 item (required).</param>
        /// <param name="fees">Buy fees should only include maker marketplace fees and should be no more than two entries as more entires will incur more gas. It is best practice to have this as few as possible. (required).</param>
        /// <param name="endAt">Time after which the Order is considered expired (required).</param>
        /// <param name="protocolData">protocolData (required).</param>
        /// <param name="salt">A random value added to the create Order request (required).</param>
        /// <param name="sell">Sell item for bid should be an ERC20 item (required).</param>
        /// <param name="signature">Digital signature generated by the user for the specific Order (required).</param>
        /// <param name="startAt">Time after which Order is considered active (required).</param>
        public CreateBidRequestBody(string accountAddress = default(string), string orderHash = default(string), List<Item> buy = default(List<Item>), List<Fee> fees = default(List<Fee>), DateTime endAt = default(DateTime), ProtocolData protocolData = default(ProtocolData), string salt = default(string), List<ERC20Item> sell = default(List<ERC20Item>), string signature = default(string), DateTime startAt = default(DateTime))
        {
            // to ensure "accountAddress" is required (not null)
            if (accountAddress == null)
            {
                throw new ArgumentNullException("accountAddress is a required property for CreateBidRequestBody and cannot be null");
            }
            this.AccountAddress = accountAddress;
            // to ensure "orderHash" is required (not null)
            if (orderHash == null)
            {
                throw new ArgumentNullException("orderHash is a required property for CreateBidRequestBody and cannot be null");
            }
            this.OrderHash = orderHash;
            // to ensure "buy" is required (not null)
            if (buy == null)
            {
                throw new ArgumentNullException("buy is a required property for CreateBidRequestBody and cannot be null");
            }
            this.Buy = buy;
            // to ensure "fees" is required (not null)
            if (fees == null)
            {
                throw new ArgumentNullException("fees is a required property for CreateBidRequestBody and cannot be null");
            }
            this.Fees = fees;
            this.EndAt = endAt;
            // to ensure "protocolData" is required (not null)
            if (protocolData == null)
            {
                throw new ArgumentNullException("protocolData is a required property for CreateBidRequestBody and cannot be null");
            }
            this.ProtocolData = protocolData;
            // to ensure "salt" is required (not null)
            if (salt == null)
            {
                throw new ArgumentNullException("salt is a required property for CreateBidRequestBody and cannot be null");
            }
            this.Salt = salt;
            // to ensure "sell" is required (not null)
            if (sell == null)
            {
                throw new ArgumentNullException("sell is a required property for CreateBidRequestBody and cannot be null");
            }
            this.Sell = sell;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for CreateBidRequestBody and cannot be null");
            }
            this.Signature = signature;
            this.StartAt = startAt;
        }

        /// <summary>
        /// Gets or Sets AccountAddress
        /// </summary>
        /// <example>0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266</example>
        [DataMember(Name = "account_address", IsRequired = true, EmitDefaultValue = true)]
        public string AccountAddress { get; set; }

        /// <summary>
        /// Gets or Sets OrderHash
        /// </summary>
        /// <example>0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266</example>
        [DataMember(Name = "order_hash", IsRequired = true, EmitDefaultValue = true)]
        public string OrderHash { get; set; }

        /// <summary>
        /// Buy item for bid should either be ERC721 or ERC1155 item
        /// </summary>
        /// <value>Buy item for bid should either be ERC721 or ERC1155 item</value>
        /// <example>[{&quot;type&quot;:&quot;ERC721&quot;,&quot;contract_address&quot;:&quot;0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E&quot;,&quot;token_id&quot;:&quot;1&quot;}]</example>
        [DataMember(Name = "buy", IsRequired = true, EmitDefaultValue = true)]
        public List<Item> Buy { get; set; }

        /// <summary>
        /// Buy fees should only include maker marketplace fees and should be no more than two entries as more entires will incur more gas. It is best practice to have this as few as possible.
        /// </summary>
        /// <value>Buy fees should only include maker marketplace fees and should be no more than two entries as more entires will incur more gas. It is best practice to have this as few as possible.</value>
        /// <example>[]</example>
        [DataMember(Name = "fees", IsRequired = true, EmitDefaultValue = true)]
        public List<Fee> Fees { get; set; }

        /// <summary>
        /// Time after which the Order is considered expired
        /// </summary>
        /// <value>Time after which the Order is considered expired</value>
        /// <example>2022-03-09T05:00:50.520Z</example>
        [DataMember(Name = "end_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndAt { get; set; }

        /// <summary>
        /// Gets or Sets ProtocolData
        /// </summary>
        [DataMember(Name = "protocol_data", IsRequired = true, EmitDefaultValue = true)]
        public ProtocolData ProtocolData { get; set; }

        /// <summary>
        /// A random value added to the create Order request
        /// </summary>
        /// <value>A random value added to the create Order request</value>
        /// <example>12686911856931635052326433555881236148</example>
        [DataMember(Name = "salt", IsRequired = true, EmitDefaultValue = true)]
        public string Salt { get; set; }

        /// <summary>
        /// Sell item for bid should be an ERC20 item
        /// </summary>
        /// <value>Sell item for bid should be an ERC20 item</value>
        /// <example>[{&quot;type&quot;:&quot;ERC20&quot;,&quot;contract_address&quot;:&quot;0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E&quot;,&quot;amount&quot;:&quot;9750000000000000000&quot;}]</example>
        [DataMember(Name = "sell", IsRequired = true, EmitDefaultValue = true)]
        public List<ERC20Item> Sell { get; set; }

        /// <summary>
        /// Digital signature generated by the user for the specific Order
        /// </summary>
        /// <value>Digital signature generated by the user for the specific Order</value>
        /// <example>0x</example>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// Time after which Order is considered active
        /// </summary>
        /// <value>Time after which Order is considered active</value>
        /// <example>2022-03-09T05:00:50.520Z</example>
        [DataMember(Name = "start_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBidRequestBody {\n");
            sb.Append("  AccountAddress: ").Append(AccountAddress).Append("\n");
            sb.Append("  OrderHash: ").Append(OrderHash).Append("\n");
            sb.Append("  Buy: ").Append(Buy).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  ProtocolData: ").Append(ProtocolData).Append("\n");
            sb.Append("  Salt: ").Append(Salt).Append("\n");
            sb.Append("  Sell: ").Append(Sell).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
