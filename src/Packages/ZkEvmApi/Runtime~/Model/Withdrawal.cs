/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// The withdrawal activity details
    /// </summary>
    [DataContract(Name = "Withdrawal")]
    public partial class Withdrawal
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Withdrawal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Withdrawal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Withdrawal" /> class.
        /// </summary>
        /// <param name="from">The account address the asset was withdrawn from (required).</param>
        /// <param name="amount">The amount of assets withdrawn (required).</param>
        /// <param name="asset">asset (required).</param>
        public Withdrawal(string from = default(string), string amount = default(string), ActivityAsset asset = default(ActivityAsset))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for Withdrawal and cannot be null");
            }
            this.From = from;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for Withdrawal and cannot be null");
            }
            this.Amount = amount;
            // to ensure "asset" is required (not null)
            if (asset == null)
            {
                throw new ArgumentNullException("asset is a required property for Withdrawal and cannot be null");
            }
            this.Asset = asset;
        }

        /// <summary>
        /// The account address the asset was withdrawn from
        /// </summary>
        /// <value>The account address the asset was withdrawn from</value>
        /// <example>0xe9b00a87700f660e46b6f5deaa1232836bcc07d3</example>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// The amount of assets withdrawn
        /// </summary>
        /// <value>The amount of assets withdrawn</value>
        /// <example>1</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "asset", IsRequired = true, EmitDefaultValue = true)]
        public ActivityAsset Asset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Withdrawal {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
