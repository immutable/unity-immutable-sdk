/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// Activity
    /// </summary>
    [DataContract(Name = "Activity")]
    public partial class Activity
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public ActivityType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Activity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        /// <param name="id">Activity id in UUIDv4 format (required).</param>
        /// <param name="chain">chain (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="details">details (required).</param>
        /// <param name="updatedAt">The time activity was updated at (required).</param>
        /// <param name="indexedAt">The time activity was indexed (required).</param>
        /// <param name="blockchainMetadata">blockchainMetadata (required).</param>
        public Activity(Guid id = default(Guid), Chain chain = default(Chain), ActivityType type = default(ActivityType), ActivityDetails details = default(ActivityDetails), DateTime updatedAt = default(DateTime), DateTime indexedAt = default(DateTime), BlockchainMetadata blockchainMetadata = default(BlockchainMetadata))
        {
            this.Id = id;
            // to ensure "chain" is required (not null)
            if (chain == null)
            {
                throw new ArgumentNullException("chain is a required property for Activity and cannot be null");
            }
            this.Chain = chain;
            this.Type = type;
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new ArgumentNullException("details is a required property for Activity and cannot be null");
            }
            this.Details = details;
            this.UpdatedAt = updatedAt;
            this.IndexedAt = indexedAt;
            // to ensure "blockchainMetadata" is required (not null)
            if (blockchainMetadata == null)
            {
                throw new ArgumentNullException("blockchainMetadata is a required property for Activity and cannot be null");
            }
            this.BlockchainMetadata = blockchainMetadata;
        }

        /// <summary>
        /// Activity id in UUIDv4 format
        /// </summary>
        /// <value>Activity id in UUIDv4 format</value>
        /// <example>4e28df8d-f65c-4c11-ba04-6a9dd47b179b</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Chain
        /// </summary>
        [DataMember(Name = "chain", IsRequired = true, EmitDefaultValue = true)]
        public Chain Chain { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", IsRequired = true, EmitDefaultValue = true)]
        public ActivityDetails Details { get; set; }

        /// <summary>
        /// The time activity was updated at
        /// </summary>
        /// <value>The time activity was updated at</value>
        /// <example>2022-08-16T17:43:26.991388Z</example>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// The time activity was indexed
        /// </summary>
        /// <value>The time activity was indexed</value>
        /// <example>2022-08-16T17:43:26.991388Z</example>
        [DataMember(Name = "indexed_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime IndexedAt { get; set; }

        /// <summary>
        /// Gets or Sets BlockchainMetadata
        /// </summary>
        [DataMember(Name = "blockchain_metadata", IsRequired = true, EmitDefaultValue = true)]
        public BlockchainMetadata BlockchainMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Activity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Chain: ").Append(Chain).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  IndexedAt: ").Append(IndexedAt).Append("\n");
            sb.Append("  BlockchainMetadata: ").Append(BlockchainMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
