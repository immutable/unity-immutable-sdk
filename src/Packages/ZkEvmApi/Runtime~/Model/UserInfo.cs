/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// UserInfo
    /// </summary>
    [DataContract(Name = "UserInfo")]
    public partial class UserInfo
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfo" /> class.
        /// </summary>
        /// <param name="sub">The user&#39;s id (required).</param>
        /// <param name="email">The user&#39;s email address.</param>
        /// <param name="passportAddress">The user&#39;s Passport address if it has been registered.</param>
        /// <param name="linkedAddresses">The user&#39;s list of linked addresses (required).</param>
        public UserInfo(string sub = default(string), string email = default(string), string passportAddress = default(string), List<string> linkedAddresses = default(List<string>))
        {
            // to ensure "sub" is required (not null)
            if (sub == null)
            {
                throw new ArgumentNullException("sub is a required property for UserInfo and cannot be null");
            }
            this.Sub = sub;
            // to ensure "linkedAddresses" is required (not null)
            if (linkedAddresses == null)
            {
                throw new ArgumentNullException("linkedAddresses is a required property for UserInfo and cannot be null");
            }
            this.LinkedAddresses = linkedAddresses;
            this.Email = email;
            this.PassportAddress = passportAddress;
        }

        /// <summary>
        /// The user&#39;s id
        /// </summary>
        /// <value>The user&#39;s id</value>
        [DataMember(Name = "sub", IsRequired = true, EmitDefaultValue = true)]
        public string Sub { get; set; }

        /// <summary>
        /// The user&#39;s email address
        /// </summary>
        /// <value>The user&#39;s email address</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The user&#39;s Passport address if it has been registered
        /// </summary>
        /// <value>The user&#39;s Passport address if it has been registered</value>
        [DataMember(Name = "passport_address", EmitDefaultValue = false)]
        public string PassportAddress { get; set; }

        /// <summary>
        /// The user&#39;s list of linked addresses
        /// </summary>
        /// <value>The user&#39;s list of linked addresses</value>
        [DataMember(Name = "linked_addresses", IsRequired = true, EmitDefaultValue = true)]
        public List<string> LinkedAddresses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserInfo {\n");
            sb.Append("  Sub: ").Append(Sub).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PassportAddress: ").Append(PassportAddress).Append("\n");
            sb.Append("  LinkedAddresses: ").Append(LinkedAddresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
