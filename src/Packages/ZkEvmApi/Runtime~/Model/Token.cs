/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// Token
    /// </summary>
    [DataContract(Name = "Token")]
    public partial class Token
    {

        /// <summary>
        /// Gets or Sets VerificationStatus
        /// </summary>
        [DataMember(Name = "verification_status", IsRequired = true, EmitDefaultValue = true)]
        public AssetVerificationStatus VerificationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Token" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Token() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Token" /> class.
        /// </summary>
        /// <param name="chain">chain (required).</param>
        /// <param name="contractAddress">The address of token contract (required).</param>
        /// <param name="rootContractAddress">The address of root token contract (required).</param>
        /// <param name="rootChainId">The id of the root chain for a bridged token.</param>
        /// <param name="bridgeUsed">The name of the bridge, for bridged tokens only.</param>
        /// <param name="symbol">The symbol of token (required).</param>
        /// <param name="decimals">The decimals of token (required).</param>
        /// <param name="imageUrl">The image url of token (required).</param>
        /// <param name="name">The name of token (required).</param>
        /// <param name="verificationStatus">verificationStatus (required).</param>
        /// <param name="updatedAt">When the collection was last updated (required).</param>
        /// <param name="isCanonical">Indicates whether the token is canonical or not (required).</param>
        public Token(Chain chain = default(Chain), string contractAddress = default(string), string rootContractAddress = default(string), string rootChainId = default(string), string bridgeUsed = default(string), string symbol = default(string), int? decimals = default(int?), string imageUrl = default(string), string name = default(string), AssetVerificationStatus verificationStatus = default(AssetVerificationStatus), DateTime updatedAt = default(DateTime), bool isCanonical = default(bool))
        {
            // to ensure "chain" is required (not null)
            if (chain == null)
            {
                throw new ArgumentNullException("chain is a required property for Token and cannot be null");
            }
            this.Chain = chain;
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new ArgumentNullException("contractAddress is a required property for Token and cannot be null");
            }
            this.ContractAddress = contractAddress;
            // to ensure "rootContractAddress" is required (not null)
            if (rootContractAddress == null)
            {
                throw new ArgumentNullException("rootContractAddress is a required property for Token and cannot be null");
            }
            this.RootContractAddress = rootContractAddress;
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new ArgumentNullException("symbol is a required property for Token and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "decimals" is required (not null)
            if (decimals == null)
            {
                throw new ArgumentNullException("decimals is a required property for Token and cannot be null");
            }
            this.Decimals = decimals;
            // to ensure "imageUrl" is required (not null)
            if (imageUrl == null)
            {
                throw new ArgumentNullException("imageUrl is a required property for Token and cannot be null");
            }
            this.ImageUrl = imageUrl;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Token and cannot be null");
            }
            this.Name = name;
            this.VerificationStatus = verificationStatus;
            this.UpdatedAt = updatedAt;
            this.IsCanonical = isCanonical;
            this.RootChainId = rootChainId;
            this.BridgeUsed = bridgeUsed;
        }

        /// <summary>
        /// Gets or Sets Chain
        /// </summary>
        [DataMember(Name = "chain", IsRequired = true, EmitDefaultValue = true)]
        public Chain Chain { get; set; }

        /// <summary>
        /// The address of token contract
        /// </summary>
        /// <value>The address of token contract</value>
        /// <example>0xc344c05eef8876e517072f879dae8905aa2b956b</example>
        [DataMember(Name = "contract_address", IsRequired = true, EmitDefaultValue = true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// The address of root token contract
        /// </summary>
        /// <value>The address of root token contract</value>
        /// <example>0x43e60b30d5bec48c0f5890e3d1e9f1b1296bb4aa</example>
        [DataMember(Name = "root_contract_address", IsRequired = true, EmitDefaultValue = true)]
        public string RootContractAddress { get; set; }

        /// <summary>
        /// The id of the root chain for a bridged token
        /// </summary>
        /// <value>The id of the root chain for a bridged token</value>
        /// <example>eip155:1</example>
        [DataMember(Name = "root_chain_id", EmitDefaultValue = true)]
        public string RootChainId { get; set; }

        /// <summary>
        /// The name of the bridge, for bridged tokens only
        /// </summary>
        /// <value>The name of the bridge, for bridged tokens only</value>
        /// <example>axelar</example>
        [DataMember(Name = "bridge_used", EmitDefaultValue = true)]
        public string BridgeUsed { get; set; }

        /// <summary>
        /// The symbol of token
        /// </summary>
        /// <value>The symbol of token</value>
        /// <example>AAA</example>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// The decimals of token
        /// </summary>
        /// <value>The decimals of token</value>
        /// <example>18</example>
        [DataMember(Name = "decimals", IsRequired = true, EmitDefaultValue = true)]
        public int? Decimals { get; set; }

        /// <summary>
        /// The image url of token
        /// </summary>
        /// <value>The image url of token</value>
        /// <example>https://some-url</example>
        [DataMember(Name = "image_url", IsRequired = true, EmitDefaultValue = true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// The name of token
        /// </summary>
        /// <value>The name of token</value>
        /// <example>Token A</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// When the collection was last updated
        /// </summary>
        /// <value>When the collection was last updated</value>
        /// <example>2022-08-16T17:43:26.991388Z</example>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Indicates whether the token is canonical or not
        /// </summary>
        /// <value>Indicates whether the token is canonical or not</value>
        /// <example>true</example>
        [DataMember(Name = "is_canonical", IsRequired = true, EmitDefaultValue = true)]
        public bool IsCanonical { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Token {\n");
            sb.Append("  Chain: ").Append(Chain).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  RootContractAddress: ").Append(RootContractAddress).Append("\n");
            sb.Append("  RootChainId: ").Append(RootChainId).Append("\n");
            sb.Append("  BridgeUsed: ").Append(BridgeUsed).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VerificationStatus: ").Append(VerificationStatus).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  IsCanonical: ").Append(IsCanonical).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
