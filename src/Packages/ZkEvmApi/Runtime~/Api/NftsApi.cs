/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Immutable.Api.ZkEvm.Client;
using Immutable.Api.ZkEvm.Model;

namespace Immutable.Api.ZkEvm.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INftsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Mint NFTs
        /// </summary>
        /// <remarks>
        /// Create a mint request to mint a set of NFTs for a given collection
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="createMintRequestRequest">Create Mint Request Body</param>
        /// <returns>CreateMintRequestResult</returns>
        CreateMintRequestResult CreateMintRequest(string contractAddress, string chainName, CreateMintRequestRequest createMintRequestRequest);

        /// <summary>
        /// Mint NFTs
        /// </summary>
        /// <remarks>
        /// Create a mint request to mint a set of NFTs for a given collection
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="createMintRequestRequest">Create Mint Request Body</param>
        /// <returns>ApiResponse of CreateMintRequestResult</returns>
        ApiResponse<CreateMintRequestResult> CreateMintRequestWithHttpInfo(string contractAddress, string chainName, CreateMintRequestRequest createMintRequestRequest);
        /// <summary>
        /// Get mint request by reference ID
        /// </summary>
        /// <remarks>
        /// Retrieve the status of a mint request identified by its reference_id
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="referenceId">The id of the mint request</param>
        /// <returns>ListMintRequestsResult</returns>
        ListMintRequestsResult GetMintRequest(string contractAddress, string chainName, string referenceId);

        /// <summary>
        /// Get mint request by reference ID
        /// </summary>
        /// <remarks>
        /// Retrieve the status of a mint request identified by its reference_id
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="referenceId">The id of the mint request</param>
        /// <returns>ApiResponse of ListMintRequestsResult</returns>
        ApiResponse<ListMintRequestsResult> GetMintRequestWithHttpInfo(string contractAddress, string chainName, string referenceId);
        /// <summary>
        /// Get NFT by token ID
        /// </summary>
        /// <remarks>
        /// Get NFT by token ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of NFT contract</param>
        /// <param name="tokenId">An &#x60;uint256&#x60; token id as string</param>
        /// <param name="chainName">The name of chain</param>
        /// <returns>GetNFTResult</returns>
        GetNFTResult GetNFT(string contractAddress, string tokenId, string chainName);

        /// <summary>
        /// Get NFT by token ID
        /// </summary>
        /// <remarks>
        /// Get NFT by token ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of NFT contract</param>
        /// <param name="tokenId">An &#x60;uint256&#x60; token id as string</param>
        /// <param name="chainName">The name of chain</param>
        /// <returns>ApiResponse of GetNFTResult</returns>
        ApiResponse<GetNFTResult> GetNFTWithHttpInfo(string contractAddress, string tokenId, string chainName);
        /// <summary>
        /// List all NFTs
        /// </summary>
        /// <remarks>
        /// List all NFTs on a chain
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ListNFTsResult</returns>
        ListNFTsResult ListAllNFTs(string chainName, DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?));

        /// <summary>
        /// List all NFTs
        /// </summary>
        /// <remarks>
        /// List all NFTs on a chain
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ApiResponse of ListNFTsResult</returns>
        ApiResponse<ListNFTsResult> ListAllNFTsWithHttpInfo(string chainName, DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?));
        /// <summary>
        /// List mint requests
        /// </summary>
        /// <remarks>
        /// Retrieve the status of all mints for a given contract address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="status">The status of the mint request (optional)</param>
        /// <returns>ListMintRequestsResult</returns>
        ListMintRequestsResult ListMintRequests(string contractAddress, string chainName, string? pageCursor = default(string?), int? pageSize = default(int?), MintRequestStatus? status = default(MintRequestStatus?));

        /// <summary>
        /// List mint requests
        /// </summary>
        /// <remarks>
        /// Retrieve the status of all mints for a given contract address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="status">The status of the mint request (optional)</param>
        /// <returns>ApiResponse of ListMintRequestsResult</returns>
        ApiResponse<ListMintRequestsResult> ListMintRequestsWithHttpInfo(string contractAddress, string chainName, string? pageCursor = default(string?), int? pageSize = default(int?), MintRequestStatus? status = default(MintRequestStatus?));
        /// <summary>
        /// List NFTs by contract address
        /// </summary>
        /// <remarks>
        /// List NFTs by contract address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Contract address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ListNFTsResult</returns>
        ListNFTsResult ListNFTs(string contractAddress, string chainName, List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?));

        /// <summary>
        /// List NFTs by contract address
        /// </summary>
        /// <remarks>
        /// List NFTs by contract address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Contract address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ApiResponse of ListNFTsResult</returns>
        ApiResponse<ListNFTsResult> ListNFTsWithHttpInfo(string contractAddress, string chainName, List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?));
        /// <summary>
        /// List NFTs by account address
        /// </summary>
        /// <remarks>
        /// List NFTs by account address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAddress">Account address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">The address of contract (optional)</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ListNFTsByOwnerResult</returns>
        ListNFTsByOwnerResult ListNFTsByAccountAddress(string accountAddress, string chainName, string? contractAddress = default(string?), List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?));

        /// <summary>
        /// List NFTs by account address
        /// </summary>
        /// <remarks>
        /// List NFTs by account address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAddress">Account address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">The address of contract (optional)</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ApiResponse of ListNFTsByOwnerResult</returns>
        ApiResponse<ListNFTsByOwnerResult> ListNFTsByAccountAddressWithHttpInfo(string accountAddress, string chainName, string? contractAddress = default(string?), List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INftsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Mint NFTs
        /// </summary>
        /// <remarks>
        /// Create a mint request to mint a set of NFTs for a given collection
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="createMintRequestRequest">Create Mint Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMintRequestResult</returns>
        System.Threading.Tasks.Task<CreateMintRequestResult> CreateMintRequestAsync(string contractAddress, string chainName, CreateMintRequestRequest createMintRequestRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Mint NFTs
        /// </summary>
        /// <remarks>
        /// Create a mint request to mint a set of NFTs for a given collection
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="createMintRequestRequest">Create Mint Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMintRequestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateMintRequestResult>> CreateMintRequestWithHttpInfoAsync(string contractAddress, string chainName, CreateMintRequestRequest createMintRequestRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get mint request by reference ID
        /// </summary>
        /// <remarks>
        /// Retrieve the status of a mint request identified by its reference_id
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="referenceId">The id of the mint request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListMintRequestsResult</returns>
        System.Threading.Tasks.Task<ListMintRequestsResult> GetMintRequestAsync(string contractAddress, string chainName, string referenceId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get mint request by reference ID
        /// </summary>
        /// <remarks>
        /// Retrieve the status of a mint request identified by its reference_id
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="referenceId">The id of the mint request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListMintRequestsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMintRequestsResult>> GetMintRequestWithHttpInfoAsync(string contractAddress, string chainName, string referenceId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT by token ID
        /// </summary>
        /// <remarks>
        /// Get NFT by token ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of NFT contract</param>
        /// <param name="tokenId">An &#x60;uint256&#x60; token id as string</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNFTResult</returns>
        System.Threading.Tasks.Task<GetNFTResult> GetNFTAsync(string contractAddress, string tokenId, string chainName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT by token ID
        /// </summary>
        /// <remarks>
        /// Get NFT by token ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of NFT contract</param>
        /// <param name="tokenId">An &#x60;uint256&#x60; token id as string</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNFTResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetNFTResult>> GetNFTWithHttpInfoAsync(string contractAddress, string tokenId, string chainName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all NFTs
        /// </summary>
        /// <remarks>
        /// List all NFTs on a chain
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNFTsResult</returns>
        System.Threading.Tasks.Task<ListNFTsResult> ListAllNFTsAsync(string chainName, DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all NFTs
        /// </summary>
        /// <remarks>
        /// List all NFTs on a chain
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNFTsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListNFTsResult>> ListAllNFTsWithHttpInfoAsync(string chainName, DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List mint requests
        /// </summary>
        /// <remarks>
        /// Retrieve the status of all mints for a given contract address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="status">The status of the mint request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListMintRequestsResult</returns>
        System.Threading.Tasks.Task<ListMintRequestsResult> ListMintRequestsAsync(string contractAddress, string chainName, string? pageCursor = default(string?), int? pageSize = default(int?), MintRequestStatus? status = default(MintRequestStatus?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List mint requests
        /// </summary>
        /// <remarks>
        /// Retrieve the status of all mints for a given contract address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="status">The status of the mint request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListMintRequestsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMintRequestsResult>> ListMintRequestsWithHttpInfoAsync(string contractAddress, string chainName, string? pageCursor = default(string?), int? pageSize = default(int?), MintRequestStatus? status = default(MintRequestStatus?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List NFTs by contract address
        /// </summary>
        /// <remarks>
        /// List NFTs by contract address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Contract address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNFTsResult</returns>
        System.Threading.Tasks.Task<ListNFTsResult> ListNFTsAsync(string contractAddress, string chainName, List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List NFTs by contract address
        /// </summary>
        /// <remarks>
        /// List NFTs by contract address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Contract address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNFTsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListNFTsResult>> ListNFTsWithHttpInfoAsync(string contractAddress, string chainName, List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List NFTs by account address
        /// </summary>
        /// <remarks>
        /// List NFTs by account address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAddress">Account address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">The address of contract (optional)</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNFTsByOwnerResult</returns>
        System.Threading.Tasks.Task<ListNFTsByOwnerResult> ListNFTsByAccountAddressAsync(string accountAddress, string chainName, string? contractAddress = default(string?), List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List NFTs by account address
        /// </summary>
        /// <remarks>
        /// List NFTs by account address
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAddress">Account address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">The address of contract (optional)</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNFTsByOwnerResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListNFTsByOwnerResult>> ListNFTsByAccountAddressWithHttpInfoAsync(string accountAddress, string chainName, string? contractAddress = default(string?), List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INftsApi : INftsApiSync, INftsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NftsApi : IDisposable, INftsApi
    {
        private Immutable.Api.ZkEvm.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NftsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public NftsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NftsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public NftsApi(string basePath)
        {
            this.Configuration = Immutable.Api.ZkEvm.Client.Configuration.MergeConfigurations(
                Immutable.Api.ZkEvm.Client.GlobalConfiguration.Instance,
                new Immutable.Api.ZkEvm.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Immutable.Api.ZkEvm.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NftsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public NftsApi(Immutable.Api.ZkEvm.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Immutable.Api.ZkEvm.Client.Configuration.MergeConfigurations(
                Immutable.Api.ZkEvm.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Immutable.Api.ZkEvm.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NftsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public NftsApi(Immutable.Api.ZkEvm.Client.ISynchronousClient client, Immutable.Api.ZkEvm.Client.IAsynchronousClient asyncClient, Immutable.Api.ZkEvm.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Immutable.Api.ZkEvm.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Mint NFTs Create a mint request to mint a set of NFTs for a given collection
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="createMintRequestRequest">Create Mint Request Body</param>
        /// <returns>CreateMintRequestResult</returns>
        public CreateMintRequestResult CreateMintRequest(string contractAddress, string chainName, CreateMintRequestRequest createMintRequestRequest)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<CreateMintRequestResult> localVarResponse = CreateMintRequestWithHttpInfo(contractAddress, chainName, createMintRequestRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mint NFTs Create a mint request to mint a set of NFTs for a given collection
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="createMintRequestRequest">Create Mint Request Body</param>
        /// <returns>ApiResponse of CreateMintRequestResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<CreateMintRequestResult> CreateMintRequestWithHttpInfo(string contractAddress, string chainName, CreateMintRequestRequest createMintRequestRequest)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling NftsApi->CreateMintRequest");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->CreateMintRequest");

            // verify the required parameter 'createMintRequestRequest' is set
            if (createMintRequestRequest == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'createMintRequestRequest' when calling NftsApi->CreateMintRequest");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = createMintRequestRequest;

            // authentication (ImmutableApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-immutable-api-key", this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateMintRequestResult>("/v1/chains/{chain_name}/collections/{contract_address}/nfts/mint-requests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMintRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mint NFTs Create a mint request to mint a set of NFTs for a given collection
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="createMintRequestRequest">Create Mint Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMintRequestResult</returns>
        public async System.Threading.Tasks.Task<CreateMintRequestResult> CreateMintRequestAsync(string contractAddress, string chainName, CreateMintRequestRequest createMintRequestRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = CreateMintRequestWithHttpInfoAsync(contractAddress, chainName, createMintRequestRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<CreateMintRequestResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<CreateMintRequestResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mint NFTs Create a mint request to mint a set of NFTs for a given collection
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="createMintRequestRequest">Create Mint Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMintRequestResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<CreateMintRequestResult>> CreateMintRequestWithHttpInfoAsync(string contractAddress, string chainName, CreateMintRequestRequest createMintRequestRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling NftsApi->CreateMintRequest");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->CreateMintRequest");

            // verify the required parameter 'createMintRequestRequest' is set
            if (createMintRequestRequest == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'createMintRequestRequest' when calling NftsApi->CreateMintRequest");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = createMintRequestRequest;

            // authentication (ImmutableApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-immutable-api-key", this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CreateMintRequestResult>("/v1/chains/{chain_name}/collections/{contract_address}/nfts/mint-requests", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMintRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mint request by reference ID Retrieve the status of a mint request identified by its reference_id
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="referenceId">The id of the mint request</param>
        /// <returns>ListMintRequestsResult</returns>
        public ListMintRequestsResult GetMintRequest(string contractAddress, string chainName, string referenceId)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListMintRequestsResult> localVarResponse = GetMintRequestWithHttpInfo(contractAddress, chainName, referenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mint request by reference ID Retrieve the status of a mint request identified by its reference_id
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="referenceId">The id of the mint request</param>
        /// <returns>ApiResponse of ListMintRequestsResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListMintRequestsResult> GetMintRequestWithHttpInfo(string contractAddress, string chainName, string referenceId)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling NftsApi->GetMintRequest");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->GetMintRequest");

            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'referenceId' when calling NftsApi->GetMintRequest");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("reference_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(referenceId)); // path parameter

            // authentication (ImmutableApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-immutable-api-key", this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListMintRequestsResult>("/v1/chains/{chain_name}/collections/{contract_address}/nfts/mint-requests/{reference_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMintRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mint request by reference ID Retrieve the status of a mint request identified by its reference_id
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="referenceId">The id of the mint request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListMintRequestsResult</returns>
        public async System.Threading.Tasks.Task<ListMintRequestsResult> GetMintRequestAsync(string contractAddress, string chainName, string referenceId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMintRequestWithHttpInfoAsync(contractAddress, chainName, referenceId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListMintRequestsResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListMintRequestsResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get mint request by reference ID Retrieve the status of a mint request identified by its reference_id
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="referenceId">The id of the mint request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListMintRequestsResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListMintRequestsResult>> GetMintRequestWithHttpInfoAsync(string contractAddress, string chainName, string referenceId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling NftsApi->GetMintRequest");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->GetMintRequest");

            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'referenceId' when calling NftsApi->GetMintRequest");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("reference_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(referenceId)); // path parameter

            // authentication (ImmutableApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-immutable-api-key", this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListMintRequestsResult>("/v1/chains/{chain_name}/collections/{contract_address}/nfts/mint-requests/{reference_id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMintRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT by token ID Get NFT by token ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of NFT contract</param>
        /// <param name="tokenId">An &#x60;uint256&#x60; token id as string</param>
        /// <param name="chainName">The name of chain</param>
        /// <returns>GetNFTResult</returns>
        public GetNFTResult GetNFT(string contractAddress, string tokenId, string chainName)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<GetNFTResult> localVarResponse = GetNFTWithHttpInfo(contractAddress, tokenId, chainName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT by token ID Get NFT by token ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of NFT contract</param>
        /// <param name="tokenId">An &#x60;uint256&#x60; token id as string</param>
        /// <param name="chainName">The name of chain</param>
        /// <returns>ApiResponse of GetNFTResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<GetNFTResult> GetNFTWithHttpInfo(string contractAddress, string tokenId, string chainName)
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling NftsApi->GetNFT");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'tokenId' when calling NftsApi->GetNFT");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->GetNFT");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetNFTResult>("/v1/chains/{chain_name}/collections/{contract_address}/nfts/{token_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFT", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT by token ID Get NFT by token ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of NFT contract</param>
        /// <param name="tokenId">An &#x60;uint256&#x60; token id as string</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNFTResult</returns>
        public async System.Threading.Tasks.Task<GetNFTResult> GetNFTAsync(string contractAddress, string tokenId, string chainName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetNFTWithHttpInfoAsync(contractAddress, tokenId, chainName, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<GetNFTResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<GetNFTResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT by token ID Get NFT by token ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of NFT contract</param>
        /// <param name="tokenId">An &#x60;uint256&#x60; token id as string</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNFTResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<GetNFTResult>> GetNFTWithHttpInfoAsync(string contractAddress, string tokenId, string chainName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling NftsApi->GetNFT");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'tokenId' when calling NftsApi->GetNFT");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->GetNFT");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetNFTResult>("/v1/chains/{chain_name}/collections/{contract_address}/nfts/{token_id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFT", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all NFTs List all NFTs on a chain
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ListNFTsResult</returns>
        public ListNFTsResult ListAllNFTs(string chainName, DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?))
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsResult> localVarResponse = ListAllNFTsWithHttpInfo(chainName, fromUpdatedAt, pageCursor, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all NFTs List all NFTs on a chain
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ApiResponse of ListNFTsResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsResult> ListAllNFTsWithHttpInfo(string chainName, DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->ListAllNFTs");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListNFTsResult>("/v1/chains/{chain_name}/nfts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all NFTs List all NFTs on a chain
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNFTsResult</returns>
        public async System.Threading.Tasks.Task<ListNFTsResult> ListAllNFTsAsync(string chainName, DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ListAllNFTsWithHttpInfoAsync(chainName, fromUpdatedAt, pageCursor, pageSize, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all NFTs List all NFTs on a chain
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNFTsResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsResult>> ListAllNFTsWithHttpInfoAsync(string chainName, DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->ListAllNFTs");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListNFTsResult>("/v1/chains/{chain_name}/nfts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List mint requests Retrieve the status of all mints for a given contract address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="status">The status of the mint request (optional)</param>
        /// <returns>ListMintRequestsResult</returns>
        public ListMintRequestsResult ListMintRequests(string contractAddress, string chainName, string? pageCursor = default(string?), int? pageSize = default(int?), MintRequestStatus? status = default(MintRequestStatus?))
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListMintRequestsResult> localVarResponse = ListMintRequestsWithHttpInfo(contractAddress, chainName, pageCursor, pageSize, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List mint requests Retrieve the status of all mints for a given contract address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="status">The status of the mint request (optional)</param>
        /// <returns>ApiResponse of ListMintRequestsResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListMintRequestsResult> ListMintRequestsWithHttpInfo(string contractAddress, string chainName, string? pageCursor = default(string?), int? pageSize = default(int?), MintRequestStatus? status = default(MintRequestStatus?))
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling NftsApi->ListMintRequests");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->ListMintRequests");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            // authentication (ImmutableApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-immutable-api-key", this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListMintRequestsResult>("/v1/chains/{chain_name}/collections/{contract_address}/nfts/mint-requests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMintRequests", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List mint requests Retrieve the status of all mints for a given contract address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="status">The status of the mint request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListMintRequestsResult</returns>
        public async System.Threading.Tasks.Task<ListMintRequestsResult> ListMintRequestsAsync(string contractAddress, string chainName, string? pageCursor = default(string?), int? pageSize = default(int?), MintRequestStatus? status = default(MintRequestStatus?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ListMintRequestsWithHttpInfoAsync(contractAddress, chainName, pageCursor, pageSize, status, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListMintRequestsResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListMintRequestsResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List mint requests Retrieve the status of all mints for a given contract address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">The address of contract</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="status">The status of the mint request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListMintRequestsResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListMintRequestsResult>> ListMintRequestsWithHttpInfoAsync(string contractAddress, string chainName, string? pageCursor = default(string?), int? pageSize = default(int?), MintRequestStatus? status = default(MintRequestStatus?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling NftsApi->ListMintRequests");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->ListMintRequests");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            // authentication (ImmutableApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-immutable-api-key", this.Configuration.GetApiKeyWithPrefix("x-immutable-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListMintRequestsResult>("/v1/chains/{chain_name}/collections/{contract_address}/nfts/mint-requests", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMintRequests", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List NFTs by contract address List NFTs by contract address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Contract address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ListNFTsResult</returns>
        public ListNFTsResult ListNFTs(string contractAddress, string chainName, List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?))
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsResult> localVarResponse = ListNFTsWithHttpInfo(contractAddress, chainName, tokenId, fromUpdatedAt, pageCursor, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List NFTs by contract address List NFTs by contract address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Contract address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ApiResponse of ListNFTsResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsResult> ListNFTsWithHttpInfo(string contractAddress, string chainName, List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?))
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling NftsApi->ListNFTs");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->ListNFTs");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (tokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("multi", "token_id", tokenId));
            }
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListNFTsResult>("/v1/chains/{chain_name}/collections/{contract_address}/nfts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List NFTs by contract address List NFTs by contract address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Contract address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNFTsResult</returns>
        public async System.Threading.Tasks.Task<ListNFTsResult> ListNFTsAsync(string contractAddress, string chainName, List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ListNFTsWithHttpInfoAsync(contractAddress, chainName, tokenId, fromUpdatedAt, pageCursor, pageSize, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List NFTs by contract address List NFTs by contract address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractAddress">Contract address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNFTsResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsResult>> ListNFTsWithHttpInfoAsync(string contractAddress, string chainName, List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling NftsApi->ListNFTs");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->ListNFTs");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (tokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("multi", "token_id", tokenId));
            }
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListNFTsResult>("/v1/chains/{chain_name}/collections/{contract_address}/nfts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List NFTs by account address List NFTs by account address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAddress">Account address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">The address of contract (optional)</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ListNFTsByOwnerResult</returns>
        public ListNFTsByOwnerResult ListNFTsByAccountAddress(string accountAddress, string chainName, string? contractAddress = default(string?), List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?))
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsByOwnerResult> localVarResponse = ListNFTsByAccountAddressWithHttpInfo(accountAddress, chainName, contractAddress, tokenId, fromUpdatedAt, pageCursor, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List NFTs by account address List NFTs by account address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAddress">Account address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">The address of contract (optional)</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <returns>ApiResponse of ListNFTsByOwnerResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsByOwnerResult> ListNFTsByAccountAddressWithHttpInfo(string accountAddress, string chainName, string? contractAddress = default(string?), List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?))
        {
            // verify the required parameter 'accountAddress' is set
            if (accountAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'accountAddress' when calling NftsApi->ListNFTsByAccountAddress");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->ListNFTsByAccountAddress");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("account_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(accountAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (contractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "contract_address", contractAddress));
            }
            if (tokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("multi", "token_id", tokenId));
            }
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListNFTsByOwnerResult>("/v1/chains/{chain_name}/accounts/{account_address}/nfts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNFTsByAccountAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List NFTs by account address List NFTs by account address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAddress">Account address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">The address of contract (optional)</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNFTsByOwnerResult</returns>
        public async System.Threading.Tasks.Task<ListNFTsByOwnerResult> ListNFTsByAccountAddressAsync(string accountAddress, string chainName, string? contractAddress = default(string?), List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ListNFTsByAccountAddressWithHttpInfoAsync(accountAddress, chainName, contractAddress, tokenId, fromUpdatedAt, pageCursor, pageSize, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsByOwnerResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsByOwnerResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List NFTs by account address List NFTs by account address
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAddress">Account address</param>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">The address of contract (optional)</param>
        /// <param name="tokenId">List of token IDs to filter by (optional)</param>
        /// <param name="fromUpdatedAt">Datetime to use as the oldest updated timestamp (optional)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="pageSize">Maximum number of items to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNFTsByOwnerResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListNFTsByOwnerResult>> ListNFTsByAccountAddressWithHttpInfoAsync(string accountAddress, string chainName, string? contractAddress = default(string?), List<string>? tokenId = default(List<string>?), DateTime? fromUpdatedAt = default(DateTime?), string? pageCursor = default(string?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountAddress' is set
            if (accountAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'accountAddress' when calling NftsApi->ListNFTsByAccountAddress");

            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling NftsApi->ListNFTsByAccountAddress");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("account_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(accountAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (contractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "contract_address", contractAddress));
            }
            if (tokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("multi", "token_id", tokenId));
            }
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListNFTsByOwnerResult>("/v1/chains/{chain_name}/accounts/{account_address}/nfts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNFTsByAccountAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
