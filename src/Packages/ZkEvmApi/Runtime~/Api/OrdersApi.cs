/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Immutable.Api.ZkEvm.Client;
using Immutable.Api.ZkEvm.Model;

namespace Immutable.Api.ZkEvm.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel one or more orders
        /// </summary>
        /// <remarks>
        /// Cancel one or more orders
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="cancelOrdersRequestBody"></param>
        /// <returns>CancelOrdersResult</returns>
        CancelOrdersResult CancelOrders(string chainName, CancelOrdersRequestBody cancelOrdersRequestBody);

        /// <summary>
        /// Cancel one or more orders
        /// </summary>
        /// <remarks>
        /// Cancel one or more orders
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="cancelOrdersRequestBody"></param>
        /// <returns>ApiResponse of CancelOrdersResult</returns>
        ApiResponse<CancelOrdersResult> CancelOrdersWithHttpInfo(string chainName, CancelOrdersRequestBody cancelOrdersRequestBody);
        /// <summary>
        /// Create a bid
        /// </summary>
        /// <remarks>
        /// Create a bid
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createBidRequestBody"></param>
        /// <returns>BidResult</returns>
        BidResult CreateBid(string chainName, CreateBidRequestBody createBidRequestBody);

        /// <summary>
        /// Create a bid
        /// </summary>
        /// <remarks>
        /// Create a bid
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createBidRequestBody"></param>
        /// <returns>ApiResponse of BidResult</returns>
        ApiResponse<BidResult> CreateBidWithHttpInfo(string chainName, CreateBidRequestBody createBidRequestBody);
        /// <summary>
        /// Create a collection bid
        /// </summary>
        /// <remarks>
        /// Create a collection bid
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createCollectionBidRequestBody"></param>
        /// <returns>CollectionBidResult</returns>
        CollectionBidResult CreateCollectionBid(string chainName, CreateCollectionBidRequestBody createCollectionBidRequestBody);

        /// <summary>
        /// Create a collection bid
        /// </summary>
        /// <remarks>
        /// Create a collection bid
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createCollectionBidRequestBody"></param>
        /// <returns>ApiResponse of CollectionBidResult</returns>
        ApiResponse<CollectionBidResult> CreateCollectionBidWithHttpInfo(string chainName, CreateCollectionBidRequestBody createCollectionBidRequestBody);
        /// <summary>
        /// Create a listing
        /// </summary>
        /// <remarks>
        /// Create a listing
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createListingRequestBody"></param>
        /// <returns>ListingResult</returns>
        ListingResult CreateListing(string chainName, CreateListingRequestBody createListingRequestBody);

        /// <summary>
        /// Create a listing
        /// </summary>
        /// <remarks>
        /// Create a listing
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createListingRequestBody"></param>
        /// <returns>ApiResponse of ListingResult</returns>
        ApiResponse<ListingResult> CreateListingWithHttpInfo(string chainName, CreateListingRequestBody createListingRequestBody);
        /// <summary>
        /// Retrieve fulfillment data for orders
        /// </summary>
        /// <remarks>
        /// Retrieve signed fulfillment data based on the list of order IDs and corresponding fees.
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="fulfillmentDataRequest"></param>
        /// <returns>FulfillmentData200Response</returns>
        FulfillmentData200Response FulfillmentData(string chainName, List<FulfillmentDataRequest> fulfillmentDataRequest);

        /// <summary>
        /// Retrieve fulfillment data for orders
        /// </summary>
        /// <remarks>
        /// Retrieve signed fulfillment data based on the list of order IDs and corresponding fees.
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="fulfillmentDataRequest"></param>
        /// <returns>ApiResponse of FulfillmentData200Response</returns>
        ApiResponse<FulfillmentData200Response> FulfillmentDataWithHttpInfo(string chainName, List<FulfillmentDataRequest> fulfillmentDataRequest);
        /// <summary>
        /// Get a single bid by ID
        /// </summary>
        /// <remarks>
        /// Get a single bid by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="bidId">Global Bid identifier</param>
        /// <returns>BidResult</returns>
        BidResult GetBid(string chainName, Guid bidId);

        /// <summary>
        /// Get a single bid by ID
        /// </summary>
        /// <remarks>
        /// Get a single bid by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="bidId">Global Bid identifier</param>
        /// <returns>ApiResponse of BidResult</returns>
        ApiResponse<BidResult> GetBidWithHttpInfo(string chainName, Guid bidId);
        /// <summary>
        /// Get a single collection bid by ID
        /// </summary>
        /// <remarks>
        /// Get a single collection bid by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="collectionBidId">Global Collection Bid identifier</param>
        /// <returns>CollectionBidResult</returns>
        CollectionBidResult GetCollectionBid(string chainName, Guid collectionBidId);

        /// <summary>
        /// Get a single collection bid by ID
        /// </summary>
        /// <remarks>
        /// Get a single collection bid by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="collectionBidId">Global Collection Bid identifier</param>
        /// <returns>ApiResponse of CollectionBidResult</returns>
        ApiResponse<CollectionBidResult> GetCollectionBidWithHttpInfo(string chainName, Guid collectionBidId);
        /// <summary>
        /// Get a single listing by ID
        /// </summary>
        /// <remarks>
        /// Get a single listing by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="listingId">Global Order identifier</param>
        /// <returns>ListingResult</returns>
        ListingResult GetListing(string chainName, Guid listingId);

        /// <summary>
        /// Get a single listing by ID
        /// </summary>
        /// <remarks>
        /// Get a single listing by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="listingId">Global Order identifier</param>
        /// <returns>ApiResponse of ListingResult</returns>
        ApiResponse<ListingResult> GetListingWithHttpInfo(string chainName, Guid listingId);
        /// <summary>
        /// Get a single trade by ID
        /// </summary>
        /// <remarks>
        /// Get a single trade by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="tradeId">Global Trade identifier</param>
        /// <returns>TradeResult</returns>
        TradeResult GetTrade(string chainName, Guid tradeId);

        /// <summary>
        /// Get a single trade by ID
        /// </summary>
        /// <remarks>
        /// Get a single trade by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="tradeId">Global Trade identifier</param>
        /// <returns>ApiResponse of TradeResult</returns>
        ApiResponse<TradeResult> GetTradeWithHttpInfo(string chainName, Guid tradeId);
        /// <summary>
        /// List all bids
        /// </summary>
        /// <remarks>
        /// List all bids
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="buyItemMetadataId">The metadata_id of the buy item (optional)</param>
        /// <param name="buyItemTokenId">buy item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ListBidsResult</returns>
        ListBidsResult ListBids(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? buyItemMetadataId = default(Guid?), string? buyItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?));

        /// <summary>
        /// List all bids
        /// </summary>
        /// <remarks>
        /// List all bids
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="buyItemMetadataId">The metadata_id of the buy item (optional)</param>
        /// <param name="buyItemTokenId">buy item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of ListBidsResult</returns>
        ApiResponse<ListBidsResult> ListBidsWithHttpInfo(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? buyItemMetadataId = default(Guid?), string? buyItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?));
        /// <summary>
        /// List all collection bids
        /// </summary>
        /// <remarks>
        /// List all collection bids
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ListCollectionBidsResult</returns>
        ListCollectionBidsResult ListCollectionBids(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?));

        /// <summary>
        /// List all collection bids
        /// </summary>
        /// <remarks>
        /// List all collection bids
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of ListCollectionBidsResult</returns>
        ApiResponse<ListCollectionBidsResult> ListCollectionBidsWithHttpInfo(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?));
        /// <summary>
        /// List all listings
        /// </summary>
        /// <remarks>
        /// List all listings
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="buyItemType">Buy item type to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the listing (optional)</param>
        /// <param name="sellItemMetadataId">The metadata_id of the sell item (optional)</param>
        /// <param name="sellItemTokenId">Sell item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;buy_item_amount&#x60; sorts by per token price, for example if 5 ERC-1155s are on sale for 10eth, it’s sorted as 2eth for &#x60;buy_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ListListingsResult</returns>
        ListListingsResult ListListings(string chainName, OrderStatusName? status = default(OrderStatusName?), string? sellItemContractAddress = default(string?), string? buyItemType = default(string?), string? buyItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? sellItemMetadataId = default(Guid?), string? sellItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?));

        /// <summary>
        /// List all listings
        /// </summary>
        /// <remarks>
        /// List all listings
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="buyItemType">Buy item type to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the listing (optional)</param>
        /// <param name="sellItemMetadataId">The metadata_id of the sell item (optional)</param>
        /// <param name="sellItemTokenId">Sell item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;buy_item_amount&#x60; sorts by per token price, for example if 5 ERC-1155s are on sale for 10eth, it’s sorted as 2eth for &#x60;buy_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of ListListingsResult</returns>
        ApiResponse<ListListingsResult> ListListingsWithHttpInfo(string chainName, OrderStatusName? status = default(OrderStatusName?), string? sellItemContractAddress = default(string?), string? buyItemType = default(string?), string? buyItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? sellItemMetadataId = default(Guid?), string? sellItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?));
        /// <summary>
        /// List all trades
        /// </summary>
        /// <remarks>
        /// List all trades
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="accountAddress"> (optional)</param>
        /// <param name="sellItemContractAddress"> (optional)</param>
        /// <param name="fromIndexedAt">From indexed at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of trades to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Trade field to sort by (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ListTradeResult</returns>
        ListTradeResult ListTrades(string chainName, string? accountAddress = default(string?), string? sellItemContractAddress = default(string?), DateTime? fromIndexedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?));

        /// <summary>
        /// List all trades
        /// </summary>
        /// <remarks>
        /// List all trades
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="accountAddress"> (optional)</param>
        /// <param name="sellItemContractAddress"> (optional)</param>
        /// <param name="fromIndexedAt">From indexed at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of trades to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Trade field to sort by (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of ListTradeResult</returns>
        ApiResponse<ListTradeResult> ListTradesWithHttpInfo(string chainName, string? accountAddress = default(string?), string? sellItemContractAddress = default(string?), DateTime? fromIndexedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel one or more orders
        /// </summary>
        /// <remarks>
        /// Cancel one or more orders
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="cancelOrdersRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOrdersResult</returns>
        System.Threading.Tasks.Task<CancelOrdersResult> CancelOrdersAsync(string chainName, CancelOrdersRequestBody cancelOrdersRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Cancel one or more orders
        /// </summary>
        /// <remarks>
        /// Cancel one or more orders
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="cancelOrdersRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOrdersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelOrdersResult>> CancelOrdersWithHttpInfoAsync(string chainName, CancelOrdersRequestBody cancelOrdersRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a bid
        /// </summary>
        /// <remarks>
        /// Create a bid
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createBidRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BidResult</returns>
        System.Threading.Tasks.Task<BidResult> CreateBidAsync(string chainName, CreateBidRequestBody createBidRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a bid
        /// </summary>
        /// <remarks>
        /// Create a bid
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createBidRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BidResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BidResult>> CreateBidWithHttpInfoAsync(string chainName, CreateBidRequestBody createBidRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a collection bid
        /// </summary>
        /// <remarks>
        /// Create a collection bid
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createCollectionBidRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionBidResult</returns>
        System.Threading.Tasks.Task<CollectionBidResult> CreateCollectionBidAsync(string chainName, CreateCollectionBidRequestBody createCollectionBidRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a collection bid
        /// </summary>
        /// <remarks>
        /// Create a collection bid
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createCollectionBidRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionBidResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionBidResult>> CreateCollectionBidWithHttpInfoAsync(string chainName, CreateCollectionBidRequestBody createCollectionBidRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a listing
        /// </summary>
        /// <remarks>
        /// Create a listing
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createListingRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingResult</returns>
        System.Threading.Tasks.Task<ListingResult> CreateListingAsync(string chainName, CreateListingRequestBody createListingRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a listing
        /// </summary>
        /// <remarks>
        /// Create a listing
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createListingRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingResult>> CreateListingWithHttpInfoAsync(string chainName, CreateListingRequestBody createListingRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve fulfillment data for orders
        /// </summary>
        /// <remarks>
        /// Retrieve signed fulfillment data based on the list of order IDs and corresponding fees.
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="fulfillmentDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentData200Response</returns>
        System.Threading.Tasks.Task<FulfillmentData200Response> FulfillmentDataAsync(string chainName, List<FulfillmentDataRequest> fulfillmentDataRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve fulfillment data for orders
        /// </summary>
        /// <remarks>
        /// Retrieve signed fulfillment data based on the list of order IDs and corresponding fees.
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="fulfillmentDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentData200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FulfillmentData200Response>> FulfillmentDataWithHttpInfoAsync(string chainName, List<FulfillmentDataRequest> fulfillmentDataRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a single bid by ID
        /// </summary>
        /// <remarks>
        /// Get a single bid by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="bidId">Global Bid identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BidResult</returns>
        System.Threading.Tasks.Task<BidResult> GetBidAsync(string chainName, Guid bidId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a single bid by ID
        /// </summary>
        /// <remarks>
        /// Get a single bid by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="bidId">Global Bid identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BidResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BidResult>> GetBidWithHttpInfoAsync(string chainName, Guid bidId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a single collection bid by ID
        /// </summary>
        /// <remarks>
        /// Get a single collection bid by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="collectionBidId">Global Collection Bid identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionBidResult</returns>
        System.Threading.Tasks.Task<CollectionBidResult> GetCollectionBidAsync(string chainName, Guid collectionBidId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a single collection bid by ID
        /// </summary>
        /// <remarks>
        /// Get a single collection bid by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="collectionBidId">Global Collection Bid identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionBidResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionBidResult>> GetCollectionBidWithHttpInfoAsync(string chainName, Guid collectionBidId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a single listing by ID
        /// </summary>
        /// <remarks>
        /// Get a single listing by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="listingId">Global Order identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingResult</returns>
        System.Threading.Tasks.Task<ListingResult> GetListingAsync(string chainName, Guid listingId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a single listing by ID
        /// </summary>
        /// <remarks>
        /// Get a single listing by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="listingId">Global Order identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingResult>> GetListingWithHttpInfoAsync(string chainName, Guid listingId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a single trade by ID
        /// </summary>
        /// <remarks>
        /// Get a single trade by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="tradeId">Global Trade identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TradeResult</returns>
        System.Threading.Tasks.Task<TradeResult> GetTradeAsync(string chainName, Guid tradeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a single trade by ID
        /// </summary>
        /// <remarks>
        /// Get a single trade by ID
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="tradeId">Global Trade identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TradeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeResult>> GetTradeWithHttpInfoAsync(string chainName, Guid tradeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all bids
        /// </summary>
        /// <remarks>
        /// List all bids
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="buyItemMetadataId">The metadata_id of the buy item (optional)</param>
        /// <param name="buyItemTokenId">buy item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListBidsResult</returns>
        System.Threading.Tasks.Task<ListBidsResult> ListBidsAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? buyItemMetadataId = default(Guid?), string? buyItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all bids
        /// </summary>
        /// <remarks>
        /// List all bids
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="buyItemMetadataId">The metadata_id of the buy item (optional)</param>
        /// <param name="buyItemTokenId">buy item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListBidsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListBidsResult>> ListBidsWithHttpInfoAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? buyItemMetadataId = default(Guid?), string? buyItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all collection bids
        /// </summary>
        /// <remarks>
        /// List all collection bids
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCollectionBidsResult</returns>
        System.Threading.Tasks.Task<ListCollectionBidsResult> ListCollectionBidsAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all collection bids
        /// </summary>
        /// <remarks>
        /// List all collection bids
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCollectionBidsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCollectionBidsResult>> ListCollectionBidsWithHttpInfoAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all listings
        /// </summary>
        /// <remarks>
        /// List all listings
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="buyItemType">Buy item type to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the listing (optional)</param>
        /// <param name="sellItemMetadataId">The metadata_id of the sell item (optional)</param>
        /// <param name="sellItemTokenId">Sell item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;buy_item_amount&#x60; sorts by per token price, for example if 5 ERC-1155s are on sale for 10eth, it’s sorted as 2eth for &#x60;buy_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListListingsResult</returns>
        System.Threading.Tasks.Task<ListListingsResult> ListListingsAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? sellItemContractAddress = default(string?), string? buyItemType = default(string?), string? buyItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? sellItemMetadataId = default(Guid?), string? sellItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all listings
        /// </summary>
        /// <remarks>
        /// List all listings
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="buyItemType">Buy item type to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the listing (optional)</param>
        /// <param name="sellItemMetadataId">The metadata_id of the sell item (optional)</param>
        /// <param name="sellItemTokenId">Sell item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;buy_item_amount&#x60; sorts by per token price, for example if 5 ERC-1155s are on sale for 10eth, it’s sorted as 2eth for &#x60;buy_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListListingsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListListingsResult>> ListListingsWithHttpInfoAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? sellItemContractAddress = default(string?), string? buyItemType = default(string?), string? buyItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? sellItemMetadataId = default(Guid?), string? sellItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all trades
        /// </summary>
        /// <remarks>
        /// List all trades
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="accountAddress"> (optional)</param>
        /// <param name="sellItemContractAddress"> (optional)</param>
        /// <param name="fromIndexedAt">From indexed at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of trades to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Trade field to sort by (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTradeResult</returns>
        System.Threading.Tasks.Task<ListTradeResult> ListTradesAsync(string chainName, string? accountAddress = default(string?), string? sellItemContractAddress = default(string?), DateTime? fromIndexedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all trades
        /// </summary>
        /// <remarks>
        /// List all trades
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="accountAddress"> (optional)</param>
        /// <param name="sellItemContractAddress"> (optional)</param>
        /// <param name="fromIndexedAt">From indexed at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of trades to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Trade field to sort by (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTradeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTradeResult>> ListTradesWithHttpInfoAsync(string chainName, string? accountAddress = default(string?), string? sellItemContractAddress = default(string?), DateTime? fromIndexedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IDisposable, IOrdersApi
    {
        private Immutable.Api.ZkEvm.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OrdersApi(string basePath)
        {
            this.Configuration = Immutable.Api.ZkEvm.Client.Configuration.MergeConfigurations(
                Immutable.Api.ZkEvm.Client.GlobalConfiguration.Instance,
                new Immutable.Api.ZkEvm.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Immutable.Api.ZkEvm.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OrdersApi(Immutable.Api.ZkEvm.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Immutable.Api.ZkEvm.Client.Configuration.MergeConfigurations(
                Immutable.Api.ZkEvm.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Immutable.Api.ZkEvm.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OrdersApi(Immutable.Api.ZkEvm.Client.ISynchronousClient client, Immutable.Api.ZkEvm.Client.IAsynchronousClient asyncClient, Immutable.Api.ZkEvm.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Immutable.Api.ZkEvm.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel one or more orders Cancel one or more orders
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="cancelOrdersRequestBody"></param>
        /// <returns>CancelOrdersResult</returns>
        public CancelOrdersResult CancelOrders(string chainName, CancelOrdersRequestBody cancelOrdersRequestBody)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<CancelOrdersResult> localVarResponse = CancelOrdersWithHttpInfo(chainName, cancelOrdersRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel one or more orders Cancel one or more orders
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="cancelOrdersRequestBody"></param>
        /// <returns>ApiResponse of CancelOrdersResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<CancelOrdersResult> CancelOrdersWithHttpInfo(string chainName, CancelOrdersRequestBody cancelOrdersRequestBody)
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->CancelOrders");

            // verify the required parameter 'cancelOrdersRequestBody' is set
            if (cancelOrdersRequestBody == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'cancelOrdersRequestBody' when calling OrdersApi->CancelOrders");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = cancelOrdersRequestBody;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CancelOrdersResult>("/v1/chains/{chain_name}/orders/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel one or more orders Cancel one or more orders
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="cancelOrdersRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOrdersResult</returns>
        public async System.Threading.Tasks.Task<CancelOrdersResult> CancelOrdersAsync(string chainName, CancelOrdersRequestBody cancelOrdersRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = CancelOrdersWithHttpInfoAsync(chainName, cancelOrdersRequestBody, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<CancelOrdersResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<CancelOrdersResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel one or more orders Cancel one or more orders
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="cancelOrdersRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOrdersResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<CancelOrdersResult>> CancelOrdersWithHttpInfoAsync(string chainName, CancelOrdersRequestBody cancelOrdersRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->CancelOrders");

            // verify the required parameter 'cancelOrdersRequestBody' is set
            if (cancelOrdersRequestBody == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'cancelOrdersRequestBody' when calling OrdersApi->CancelOrders");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = cancelOrdersRequestBody;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CancelOrdersResult>("/v1/chains/{chain_name}/orders/cancel", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a bid Create a bid
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createBidRequestBody"></param>
        /// <returns>BidResult</returns>
        public BidResult CreateBid(string chainName, CreateBidRequestBody createBidRequestBody)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<BidResult> localVarResponse = CreateBidWithHttpInfo(chainName, createBidRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bid Create a bid
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createBidRequestBody"></param>
        /// <returns>ApiResponse of BidResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<BidResult> CreateBidWithHttpInfo(string chainName, CreateBidRequestBody createBidRequestBody)
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->CreateBid");

            // verify the required parameter 'createBidRequestBody' is set
            if (createBidRequestBody == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'createBidRequestBody' when calling OrdersApi->CreateBid");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = createBidRequestBody;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BidResult>("/v1/chains/{chain_name}/orders/bids", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a bid Create a bid
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createBidRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BidResult</returns>
        public async System.Threading.Tasks.Task<BidResult> CreateBidAsync(string chainName, CreateBidRequestBody createBidRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = CreateBidWithHttpInfoAsync(chainName, createBidRequestBody, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<BidResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<BidResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bid Create a bid
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createBidRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BidResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<BidResult>> CreateBidWithHttpInfoAsync(string chainName, CreateBidRequestBody createBidRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->CreateBid");

            // verify the required parameter 'createBidRequestBody' is set
            if (createBidRequestBody == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'createBidRequestBody' when calling OrdersApi->CreateBid");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = createBidRequestBody;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<BidResult>("/v1/chains/{chain_name}/orders/bids", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a collection bid Create a collection bid
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createCollectionBidRequestBody"></param>
        /// <returns>CollectionBidResult</returns>
        public CollectionBidResult CreateCollectionBid(string chainName, CreateCollectionBidRequestBody createCollectionBidRequestBody)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<CollectionBidResult> localVarResponse = CreateCollectionBidWithHttpInfo(chainName, createCollectionBidRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a collection bid Create a collection bid
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createCollectionBidRequestBody"></param>
        /// <returns>ApiResponse of CollectionBidResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<CollectionBidResult> CreateCollectionBidWithHttpInfo(string chainName, CreateCollectionBidRequestBody createCollectionBidRequestBody)
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->CreateCollectionBid");

            // verify the required parameter 'createCollectionBidRequestBody' is set
            if (createCollectionBidRequestBody == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'createCollectionBidRequestBody' when calling OrdersApi->CreateCollectionBid");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = createCollectionBidRequestBody;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CollectionBidResult>("/v1/chains/{chain_name}/orders/collection-bids", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollectionBid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a collection bid Create a collection bid
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createCollectionBidRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionBidResult</returns>
        public async System.Threading.Tasks.Task<CollectionBidResult> CreateCollectionBidAsync(string chainName, CreateCollectionBidRequestBody createCollectionBidRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = CreateCollectionBidWithHttpInfoAsync(chainName, createCollectionBidRequestBody, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<CollectionBidResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<CollectionBidResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a collection bid Create a collection bid
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createCollectionBidRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionBidResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<CollectionBidResult>> CreateCollectionBidWithHttpInfoAsync(string chainName, CreateCollectionBidRequestBody createCollectionBidRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->CreateCollectionBid");

            // verify the required parameter 'createCollectionBidRequestBody' is set
            if (createCollectionBidRequestBody == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'createCollectionBidRequestBody' when calling OrdersApi->CreateCollectionBid");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = createCollectionBidRequestBody;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CollectionBidResult>("/v1/chains/{chain_name}/orders/collection-bids", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollectionBid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a listing Create a listing
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createListingRequestBody"></param>
        /// <returns>ListingResult</returns>
        public ListingResult CreateListing(string chainName, CreateListingRequestBody createListingRequestBody)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListingResult> localVarResponse = CreateListingWithHttpInfo(chainName, createListingRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a listing Create a listing
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createListingRequestBody"></param>
        /// <returns>ApiResponse of ListingResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListingResult> CreateListingWithHttpInfo(string chainName, CreateListingRequestBody createListingRequestBody)
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->CreateListing");

            // verify the required parameter 'createListingRequestBody' is set
            if (createListingRequestBody == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'createListingRequestBody' when calling OrdersApi->CreateListing");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = createListingRequestBody;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ListingResult>("/v1/chains/{chain_name}/orders/listings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a listing Create a listing
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createListingRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingResult</returns>
        public async System.Threading.Tasks.Task<ListingResult> CreateListingAsync(string chainName, CreateListingRequestBody createListingRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = CreateListingWithHttpInfoAsync(chainName, createListingRequestBody, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListingResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListingResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a listing Create a listing
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="createListingRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListingResult>> CreateListingWithHttpInfoAsync(string chainName, CreateListingRequestBody createListingRequestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->CreateListing");

            // verify the required parameter 'createListingRequestBody' is set
            if (createListingRequestBody == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'createListingRequestBody' when calling OrdersApi->CreateListing");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = createListingRequestBody;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ListingResult>("/v1/chains/{chain_name}/orders/listings", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve fulfillment data for orders Retrieve signed fulfillment data based on the list of order IDs and corresponding fees.
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="fulfillmentDataRequest"></param>
        /// <returns>FulfillmentData200Response</returns>
        public FulfillmentData200Response FulfillmentData(string chainName, List<FulfillmentDataRequest> fulfillmentDataRequest)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<FulfillmentData200Response> localVarResponse = FulfillmentDataWithHttpInfo(chainName, fulfillmentDataRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve fulfillment data for orders Retrieve signed fulfillment data based on the list of order IDs and corresponding fees.
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="fulfillmentDataRequest"></param>
        /// <returns>ApiResponse of FulfillmentData200Response</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<FulfillmentData200Response> FulfillmentDataWithHttpInfo(string chainName, List<FulfillmentDataRequest> fulfillmentDataRequest)
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->FulfillmentData");

            // verify the required parameter 'fulfillmentDataRequest' is set
            if (fulfillmentDataRequest == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'fulfillmentDataRequest' when calling OrdersApi->FulfillmentData");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = fulfillmentDataRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FulfillmentData200Response>("/v1/chains/{chain_name}/orders/fulfillment-data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FulfillmentData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve fulfillment data for orders Retrieve signed fulfillment data based on the list of order IDs and corresponding fees.
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="fulfillmentDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillmentData200Response</returns>
        public async System.Threading.Tasks.Task<FulfillmentData200Response> FulfillmentDataAsync(string chainName, List<FulfillmentDataRequest> fulfillmentDataRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = FulfillmentDataWithHttpInfoAsync(chainName, fulfillmentDataRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<FulfillmentData200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<FulfillmentData200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve fulfillment data for orders Retrieve signed fulfillment data based on the list of order IDs and corresponding fees.
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="fulfillmentDataRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillmentData200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<FulfillmentData200Response>> FulfillmentDataWithHttpInfoAsync(string chainName, List<FulfillmentDataRequest> fulfillmentDataRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->FulfillmentData");

            // verify the required parameter 'fulfillmentDataRequest' is set
            if (fulfillmentDataRequest == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'fulfillmentDataRequest' when calling OrdersApi->FulfillmentData");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.Data = fulfillmentDataRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<FulfillmentData200Response>("/v1/chains/{chain_name}/orders/fulfillment-data", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FulfillmentData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single bid by ID Get a single bid by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="bidId">Global Bid identifier</param>
        /// <returns>BidResult</returns>
        public BidResult GetBid(string chainName, Guid bidId)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<BidResult> localVarResponse = GetBidWithHttpInfo(chainName, bidId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single bid by ID Get a single bid by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="bidId">Global Bid identifier</param>
        /// <returns>ApiResponse of BidResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<BidResult> GetBidWithHttpInfo(string chainName, Guid bidId)
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->GetBid");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("bid_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(bidId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BidResult>("/v1/chains/{chain_name}/orders/bids/{bid_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single bid by ID Get a single bid by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="bidId">Global Bid identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BidResult</returns>
        public async System.Threading.Tasks.Task<BidResult> GetBidAsync(string chainName, Guid bidId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetBidWithHttpInfoAsync(chainName, bidId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<BidResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<BidResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single bid by ID Get a single bid by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="bidId">Global Bid identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BidResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<BidResult>> GetBidWithHttpInfoAsync(string chainName, Guid bidId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->GetBid");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("bid_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(bidId)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<BidResult>("/v1/chains/{chain_name}/orders/bids/{bid_id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single collection bid by ID Get a single collection bid by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="collectionBidId">Global Collection Bid identifier</param>
        /// <returns>CollectionBidResult</returns>
        public CollectionBidResult GetCollectionBid(string chainName, Guid collectionBidId)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<CollectionBidResult> localVarResponse = GetCollectionBidWithHttpInfo(chainName, collectionBidId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single collection bid by ID Get a single collection bid by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="collectionBidId">Global Collection Bid identifier</param>
        /// <returns>ApiResponse of CollectionBidResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<CollectionBidResult> GetCollectionBidWithHttpInfo(string chainName, Guid collectionBidId)
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->GetCollectionBid");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_bid_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(collectionBidId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionBidResult>("/v1/chains/{chain_name}/orders/collection-bids/{collection_bid_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionBid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single collection bid by ID Get a single collection bid by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="collectionBidId">Global Collection Bid identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionBidResult</returns>
        public async System.Threading.Tasks.Task<CollectionBidResult> GetCollectionBidAsync(string chainName, Guid collectionBidId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetCollectionBidWithHttpInfoAsync(chainName, collectionBidId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<CollectionBidResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<CollectionBidResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single collection bid by ID Get a single collection bid by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="collectionBidId">Global Collection Bid identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionBidResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<CollectionBidResult>> GetCollectionBidWithHttpInfoAsync(string chainName, Guid collectionBidId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->GetCollectionBid");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_bid_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(collectionBidId)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<CollectionBidResult>("/v1/chains/{chain_name}/orders/collection-bids/{collection_bid_id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollectionBid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single listing by ID Get a single listing by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="listingId">Global Order identifier</param>
        /// <returns>ListingResult</returns>
        public ListingResult GetListing(string chainName, Guid listingId)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListingResult> localVarResponse = GetListingWithHttpInfo(chainName, listingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single listing by ID Get a single listing by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="listingId">Global Order identifier</param>
        /// <returns>ApiResponse of ListingResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListingResult> GetListingWithHttpInfo(string chainName, Guid listingId)
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->GetListing");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("listing_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(listingId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListingResult>("/v1/chains/{chain_name}/orders/listings/{listing_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single listing by ID Get a single listing by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="listingId">Global Order identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListingResult</returns>
        public async System.Threading.Tasks.Task<ListingResult> GetListingAsync(string chainName, Guid listingId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetListingWithHttpInfoAsync(chainName, listingId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListingResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListingResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single listing by ID Get a single listing by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="listingId">Global Order identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListingResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListingResult>> GetListingWithHttpInfoAsync(string chainName, Guid listingId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->GetListing");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("listing_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(listingId)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListingResult>("/v1/chains/{chain_name}/orders/listings/{listing_id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single trade by ID Get a single trade by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="tradeId">Global Trade identifier</param>
        /// <returns>TradeResult</returns>
        public TradeResult GetTrade(string chainName, Guid tradeId)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<TradeResult> localVarResponse = GetTradeWithHttpInfo(chainName, tradeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single trade by ID Get a single trade by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="tradeId">Global Trade identifier</param>
        /// <returns>ApiResponse of TradeResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<TradeResult> GetTradeWithHttpInfo(string chainName, Guid tradeId)
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->GetTrade");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("trade_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(tradeId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<TradeResult>("/v1/chains/{chain_name}/trades/{trade_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrade", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single trade by ID Get a single trade by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="tradeId">Global Trade identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TradeResult</returns>
        public async System.Threading.Tasks.Task<TradeResult> GetTradeAsync(string chainName, Guid tradeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetTradeWithHttpInfoAsync(chainName, tradeId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<TradeResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<TradeResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single trade by ID Get a single trade by ID
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="tradeId">Global Trade identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TradeResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<TradeResult>> GetTradeWithHttpInfoAsync(string chainName, Guid tradeId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->GetTrade");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("trade_id", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(tradeId)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<TradeResult>("/v1/chains/{chain_name}/trades/{trade_id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrade", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all bids List all bids
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="buyItemMetadataId">The metadata_id of the buy item (optional)</param>
        /// <param name="buyItemTokenId">buy item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ListBidsResult</returns>
        public ListBidsResult ListBids(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? buyItemMetadataId = default(Guid?), string? buyItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?))
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListBidsResult> localVarResponse = ListBidsWithHttpInfo(chainName, status, buyItemContractAddress, sellItemContractAddress, accountAddress, buyItemMetadataId, buyItemTokenId, fromUpdatedAt, pageSize, sortBy, sortDirection, pageCursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all bids List all bids
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="buyItemMetadataId">The metadata_id of the buy item (optional)</param>
        /// <param name="buyItemTokenId">buy item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of ListBidsResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListBidsResult> ListBidsWithHttpInfo(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? buyItemMetadataId = default(Guid?), string? buyItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->ListBids");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (buyItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_contract_address", buyItemContractAddress));
            }
            if (sellItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_contract_address", sellItemContractAddress));
            }
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (buyItemMetadataId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_metadata_id", buyItemMetadataId));
            }
            if (buyItemTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_token_id", buyItemTokenId));
            }
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListBidsResult>("/v1/chains/{chain_name}/orders/bids", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBids", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all bids List all bids
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="buyItemMetadataId">The metadata_id of the buy item (optional)</param>
        /// <param name="buyItemTokenId">buy item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListBidsResult</returns>
        public async System.Threading.Tasks.Task<ListBidsResult> ListBidsAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? buyItemMetadataId = default(Guid?), string? buyItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ListBidsWithHttpInfoAsync(chainName, status, buyItemContractAddress, sellItemContractAddress, accountAddress, buyItemMetadataId, buyItemTokenId, fromUpdatedAt, pageSize, sortBy, sortDirection, pageCursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListBidsResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListBidsResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all bids List all bids
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="buyItemMetadataId">The metadata_id of the buy item (optional)</param>
        /// <param name="buyItemTokenId">buy item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListBidsResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListBidsResult>> ListBidsWithHttpInfoAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? buyItemMetadataId = default(Guid?), string? buyItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->ListBids");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (buyItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_contract_address", buyItemContractAddress));
            }
            if (sellItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_contract_address", sellItemContractAddress));
            }
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (buyItemMetadataId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_metadata_id", buyItemMetadataId));
            }
            if (buyItemTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_token_id", buyItemTokenId));
            }
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListBidsResult>("/v1/chains/{chain_name}/orders/bids", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBids", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all collection bids List all collection bids
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ListCollectionBidsResult</returns>
        public ListCollectionBidsResult ListCollectionBids(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?))
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListCollectionBidsResult> localVarResponse = ListCollectionBidsWithHttpInfo(chainName, status, buyItemContractAddress, sellItemContractAddress, accountAddress, fromUpdatedAt, pageSize, sortBy, sortDirection, pageCursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all collection bids List all collection bids
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of ListCollectionBidsResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListCollectionBidsResult> ListCollectionBidsWithHttpInfo(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->ListCollectionBids");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (buyItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_contract_address", buyItemContractAddress));
            }
            if (sellItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_contract_address", sellItemContractAddress));
            }
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCollectionBidsResult>("/v1/chains/{chain_name}/orders/collection-bids", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollectionBids", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all collection bids List all collection bids
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCollectionBidsResult</returns>
        public async System.Threading.Tasks.Task<ListCollectionBidsResult> ListCollectionBidsAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ListCollectionBidsWithHttpInfoAsync(chainName, status, buyItemContractAddress, sellItemContractAddress, accountAddress, fromUpdatedAt, pageSize, sortBy, sortDirection, pageCursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListCollectionBidsResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListCollectionBidsResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all collection bids List all collection bids
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the bid (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;sell_item_amount&#x60; sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, it’s sorted as 2eth for &#x60;sell_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCollectionBidsResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListCollectionBidsResult>> ListCollectionBidsWithHttpInfoAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? buyItemContractAddress = default(string?), string? sellItemContractAddress = default(string?), string? accountAddress = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->ListCollectionBids");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (buyItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_contract_address", buyItemContractAddress));
            }
            if (sellItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_contract_address", sellItemContractAddress));
            }
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListCollectionBidsResult>("/v1/chains/{chain_name}/orders/collection-bids", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollectionBids", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all listings List all listings
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="buyItemType">Buy item type to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the listing (optional)</param>
        /// <param name="sellItemMetadataId">The metadata_id of the sell item (optional)</param>
        /// <param name="sellItemTokenId">Sell item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;buy_item_amount&#x60; sorts by per token price, for example if 5 ERC-1155s are on sale for 10eth, it’s sorted as 2eth for &#x60;buy_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ListListingsResult</returns>
        public ListListingsResult ListListings(string chainName, OrderStatusName? status = default(OrderStatusName?), string? sellItemContractAddress = default(string?), string? buyItemType = default(string?), string? buyItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? sellItemMetadataId = default(Guid?), string? sellItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?))
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListListingsResult> localVarResponse = ListListingsWithHttpInfo(chainName, status, sellItemContractAddress, buyItemType, buyItemContractAddress, accountAddress, sellItemMetadataId, sellItemTokenId, fromUpdatedAt, pageSize, sortBy, sortDirection, pageCursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all listings List all listings
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="buyItemType">Buy item type to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the listing (optional)</param>
        /// <param name="sellItemMetadataId">The metadata_id of the sell item (optional)</param>
        /// <param name="sellItemTokenId">Sell item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;buy_item_amount&#x60; sorts by per token price, for example if 5 ERC-1155s are on sale for 10eth, it’s sorted as 2eth for &#x60;buy_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of ListListingsResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListListingsResult> ListListingsWithHttpInfo(string chainName, OrderStatusName? status = default(OrderStatusName?), string? sellItemContractAddress = default(string?), string? buyItemType = default(string?), string? buyItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? sellItemMetadataId = default(Guid?), string? sellItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->ListListings");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (sellItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_contract_address", sellItemContractAddress));
            }
            if (buyItemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_type", buyItemType));
            }
            if (buyItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_contract_address", buyItemContractAddress));
            }
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (sellItemMetadataId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_metadata_id", sellItemMetadataId));
            }
            if (sellItemTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_token_id", sellItemTokenId));
            }
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListListingsResult>("/v1/chains/{chain_name}/orders/listings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListListings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all listings List all listings
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="buyItemType">Buy item type to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the listing (optional)</param>
        /// <param name="sellItemMetadataId">The metadata_id of the sell item (optional)</param>
        /// <param name="sellItemTokenId">Sell item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;buy_item_amount&#x60; sorts by per token price, for example if 5 ERC-1155s are on sale for 10eth, it’s sorted as 2eth for &#x60;buy_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListListingsResult</returns>
        public async System.Threading.Tasks.Task<ListListingsResult> ListListingsAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? sellItemContractAddress = default(string?), string? buyItemType = default(string?), string? buyItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? sellItemMetadataId = default(Guid?), string? sellItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ListListingsWithHttpInfoAsync(chainName, status, sellItemContractAddress, buyItemType, buyItemContractAddress, accountAddress, sellItemMetadataId, sellItemTokenId, fromUpdatedAt, pageSize, sortBy, sortDirection, pageCursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListListingsResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListListingsResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all listings List all listings
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="status">Order status to filter by (optional)</param>
        /// <param name="sellItemContractAddress">Sell item contract address to filter by (optional)</param>
        /// <param name="buyItemType">Buy item type to filter by (optional)</param>
        /// <param name="buyItemContractAddress">Buy item contract address to filter by (optional)</param>
        /// <param name="accountAddress">The account address of the user who created the listing (optional)</param>
        /// <param name="sellItemMetadataId">The metadata_id of the sell item (optional)</param>
        /// <param name="sellItemTokenId">Sell item token identifier to filter by (optional)</param>
        /// <param name="fromUpdatedAt">From updated at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of orders to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Order field to sort by. &#x60;buy_item_amount&#x60; sorts by per token price, for example if 5 ERC-1155s are on sale for 10eth, it’s sorted as 2eth for &#x60;buy_item_amount&#x60;. (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListListingsResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListListingsResult>> ListListingsWithHttpInfoAsync(string chainName, OrderStatusName? status = default(OrderStatusName?), string? sellItemContractAddress = default(string?), string? buyItemType = default(string?), string? buyItemContractAddress = default(string?), string? accountAddress = default(string?), Guid? sellItemMetadataId = default(Guid?), string? sellItemTokenId = default(string?), DateTime? fromUpdatedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->ListListings");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (sellItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_contract_address", sellItemContractAddress));
            }
            if (buyItemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_type", buyItemType));
            }
            if (buyItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "buy_item_contract_address", buyItemContractAddress));
            }
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (sellItemMetadataId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_metadata_id", sellItemMetadataId));
            }
            if (sellItemTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_token_id", sellItemTokenId));
            }
            if (fromUpdatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_updated_at", fromUpdatedAt));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListListingsResult>("/v1/chains/{chain_name}/orders/listings", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListListings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all trades List all trades
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="accountAddress"> (optional)</param>
        /// <param name="sellItemContractAddress"> (optional)</param>
        /// <param name="fromIndexedAt">From indexed at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of trades to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Trade field to sort by (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ListTradeResult</returns>
        public ListTradeResult ListTrades(string chainName, string? accountAddress = default(string?), string? sellItemContractAddress = default(string?), DateTime? fromIndexedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?))
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListTradeResult> localVarResponse = ListTradesWithHttpInfo(chainName, accountAddress, sellItemContractAddress, fromIndexedAt, pageSize, sortBy, sortDirection, pageCursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all trades List all trades
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="accountAddress"> (optional)</param>
        /// <param name="sellItemContractAddress"> (optional)</param>
        /// <param name="fromIndexedAt">From indexed at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of trades to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Trade field to sort by (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of ListTradeResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListTradeResult> ListTradesWithHttpInfo(string chainName, string? accountAddress = default(string?), string? sellItemContractAddress = default(string?), DateTime? fromIndexedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->ListTrades");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (sellItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_contract_address", sellItemContractAddress));
            }
            if (fromIndexedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_indexed_at", fromIndexedAt));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListTradeResult>("/v1/chains/{chain_name}/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all trades List all trades
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="accountAddress"> (optional)</param>
        /// <param name="sellItemContractAddress"> (optional)</param>
        /// <param name="fromIndexedAt">From indexed at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of trades to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Trade field to sort by (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTradeResult</returns>
        public async System.Threading.Tasks.Task<ListTradeResult> ListTradesAsync(string chainName, string? accountAddress = default(string?), string? sellItemContractAddress = default(string?), DateTime? fromIndexedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ListTradesWithHttpInfoAsync(chainName, accountAddress, sellItemContractAddress, fromIndexedAt, pageSize, sortBy, sortDirection, pageCursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListTradeResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListTradeResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all trades List all trades
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName"></param>
        /// <param name="accountAddress"> (optional)</param>
        /// <param name="sellItemContractAddress"> (optional)</param>
        /// <param name="fromIndexedAt">From indexed at including given date (optional)</param>
        /// <param name="pageSize">Maximum number of trades to return per page (optional, default to 100)</param>
        /// <param name="sortBy">Trade field to sort by (optional)</param>
        /// <param name="sortDirection">Ascending or descending direction for sort (optional)</param>
        /// <param name="pageCursor">Page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTradeResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListTradeResult>> ListTradesWithHttpInfoAsync(string chainName, string? accountAddress = default(string?), string? sellItemContractAddress = default(string?), DateTime? fromIndexedAt = default(DateTime?), int? pageSize = default(int?), string? sortBy = default(string?), string? sortDirection = default(string?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling OrdersApi->ListTrades");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (sellItemContractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sell_item_contract_address", sellItemContractAddress));
            }
            if (fromIndexedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "from_indexed_at", fromIndexedAt));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListTradeResult>("/v1/chains/{chain_name}/trades", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
