/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Immutable.Api.ZkEvm.Client;
using Immutable.Api.ZkEvm.Model;

namespace Immutable.Api.ZkEvm.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataSearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get list of metadata attribute filters
        /// </summary>
        /// <remarks>
        /// Get list of metadata filters
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">Contract addresses for collection</param>
        /// <returns>ListFiltersResult</returns>
        ListFiltersResult ListFilters(string chainName, string contractAddress);

        /// <summary>
        /// Get list of metadata attribute filters
        /// </summary>
        /// <remarks>
        /// Get list of metadata filters
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">Contract addresses for collection</param>
        /// <returns>ApiResponse of ListFiltersResult</returns>
        ApiResponse<ListFiltersResult> ListFiltersWithHttpInfo(string chainName, string contractAddress);
        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Search NFTs
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="stackId">Filters NFTs that belong to any of these stacks (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether the listings should include only the owner created listings (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>SearchNFTsResult</returns>
        SearchNFTsResult SearchNFTs(string chainName, List<string> contractAddress, string? accountAddress = default(string?), List<Guid>? stackId = default(List<Guid>?), bool? onlyIncludeOwnerListings = default(bool?), int? pageSize = default(int?), string? pageCursor = default(string?));

        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Search NFTs
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="stackId">Filters NFTs that belong to any of these stacks (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether the listings should include only the owner created listings (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of SearchNFTsResult</returns>
        ApiResponse<SearchNFTsResult> SearchNFTsWithHttpInfo(string chainName, List<string> contractAddress, string? accountAddress = default(string?), List<Guid>? stackId = default(List<Guid>?), bool? onlyIncludeOwnerListings = default(bool?), int? pageSize = default(int?), string? pageCursor = default(string?));
        /// <summary>
        /// Search NFT stacks
        /// </summary>
        /// <remarks>
        /// Search NFT stacks
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether to the listings should include only the owner created listings (optional)</param>
        /// <param name="onlyIfHasActiveListings">Filters results to include only stacks that have a current active listing. False and &#39;null&#39; return all unfiltered stacks. (optional)</param>
        /// <param name="traits">JSON encoded traits to filter by. e.g. encodeURIComponent(JSON.stringify({\&quot;rarity\&quot;: {\&quot;values\&quot;: [\&quot;common\&quot;, \&quot;rare\&quot;], \&quot;condition\&quot;: \&quot;eq\&quot;}})) (optional)</param>
        /// <param name="keyword">Keyword to search NFT name and description. Alphanumeric characters only. (optional)</param>
        /// <param name="sortBy">Sort results in a specific order (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>SearchStacksResult</returns>
        SearchStacksResult SearchStacks(string chainName, List<string> contractAddress, string? accountAddress = default(string?), bool? onlyIncludeOwnerListings = default(bool?), bool? onlyIfHasActiveListings = default(bool?), string? traits = default(string?), string? keyword = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), string? pageCursor = default(string?));

        /// <summary>
        /// Search NFT stacks
        /// </summary>
        /// <remarks>
        /// Search NFT stacks
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether to the listings should include only the owner created listings (optional)</param>
        /// <param name="onlyIfHasActiveListings">Filters results to include only stacks that have a current active listing. False and &#39;null&#39; return all unfiltered stacks. (optional)</param>
        /// <param name="traits">JSON encoded traits to filter by. e.g. encodeURIComponent(JSON.stringify({\&quot;rarity\&quot;: {\&quot;values\&quot;: [\&quot;common\&quot;, \&quot;rare\&quot;], \&quot;condition\&quot;: \&quot;eq\&quot;}})) (optional)</param>
        /// <param name="keyword">Keyword to search NFT name and description. Alphanumeric characters only. (optional)</param>
        /// <param name="sortBy">Sort results in a specific order (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of SearchStacksResult</returns>
        ApiResponse<SearchStacksResult> SearchStacksWithHttpInfo(string chainName, List<string> contractAddress, string? accountAddress = default(string?), bool? onlyIncludeOwnerListings = default(bool?), bool? onlyIfHasActiveListings = default(bool?), string? traits = default(string?), string? keyword = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), string? pageCursor = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataSearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get list of metadata attribute filters
        /// </summary>
        /// <remarks>
        /// Get list of metadata filters
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">Contract addresses for collection</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFiltersResult</returns>
        System.Threading.Tasks.Task<ListFiltersResult> ListFiltersAsync(string chainName, string contractAddress, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get list of metadata attribute filters
        /// </summary>
        /// <remarks>
        /// Get list of metadata filters
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">Contract addresses for collection</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFiltersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFiltersResult>> ListFiltersWithHttpInfoAsync(string chainName, string contractAddress, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Search NFTs
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="stackId">Filters NFTs that belong to any of these stacks (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether the listings should include only the owner created listings (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchNFTsResult</returns>
        System.Threading.Tasks.Task<SearchNFTsResult> SearchNFTsAsync(string chainName, List<string> contractAddress, string? accountAddress = default(string?), List<Guid>? stackId = default(List<Guid>?), bool? onlyIncludeOwnerListings = default(bool?), int? pageSize = default(int?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Search NFTs
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="stackId">Filters NFTs that belong to any of these stacks (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether the listings should include only the owner created listings (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchNFTsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchNFTsResult>> SearchNFTsWithHttpInfoAsync(string chainName, List<string> contractAddress, string? accountAddress = default(string?), List<Guid>? stackId = default(List<Guid>?), bool? onlyIncludeOwnerListings = default(bool?), int? pageSize = default(int?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search NFT stacks
        /// </summary>
        /// <remarks>
        /// Search NFT stacks
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether to the listings should include only the owner created listings (optional)</param>
        /// <param name="onlyIfHasActiveListings">Filters results to include only stacks that have a current active listing. False and &#39;null&#39; return all unfiltered stacks. (optional)</param>
        /// <param name="traits">JSON encoded traits to filter by. e.g. encodeURIComponent(JSON.stringify({\&quot;rarity\&quot;: {\&quot;values\&quot;: [\&quot;common\&quot;, \&quot;rare\&quot;], \&quot;condition\&quot;: \&quot;eq\&quot;}})) (optional)</param>
        /// <param name="keyword">Keyword to search NFT name and description. Alphanumeric characters only. (optional)</param>
        /// <param name="sortBy">Sort results in a specific order (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchStacksResult</returns>
        System.Threading.Tasks.Task<SearchStacksResult> SearchStacksAsync(string chainName, List<string> contractAddress, string? accountAddress = default(string?), bool? onlyIncludeOwnerListings = default(bool?), bool? onlyIfHasActiveListings = default(bool?), string? traits = default(string?), string? keyword = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search NFT stacks
        /// </summary>
        /// <remarks>
        /// Search NFT stacks
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether to the listings should include only the owner created listings (optional)</param>
        /// <param name="onlyIfHasActiveListings">Filters results to include only stacks that have a current active listing. False and &#39;null&#39; return all unfiltered stacks. (optional)</param>
        /// <param name="traits">JSON encoded traits to filter by. e.g. encodeURIComponent(JSON.stringify({\&quot;rarity\&quot;: {\&quot;values\&quot;: [\&quot;common\&quot;, \&quot;rare\&quot;], \&quot;condition\&quot;: \&quot;eq\&quot;}})) (optional)</param>
        /// <param name="keyword">Keyword to search NFT name and description. Alphanumeric characters only. (optional)</param>
        /// <param name="sortBy">Sort results in a specific order (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchStacksResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchStacksResult>> SearchStacksWithHttpInfoAsync(string chainName, List<string> contractAddress, string? accountAddress = default(string?), bool? onlyIncludeOwnerListings = default(bool?), bool? onlyIfHasActiveListings = default(bool?), string? traits = default(string?), string? keyword = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataSearchApi : IMetadataSearchApiSync, IMetadataSearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetadataSearchApi : IDisposable, IMetadataSearchApi
    {
        private Immutable.Api.ZkEvm.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataSearchApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MetadataSearchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataSearchApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MetadataSearchApi(string basePath)
        {
            this.Configuration = Immutable.Api.ZkEvm.Client.Configuration.MergeConfigurations(
                Immutable.Api.ZkEvm.Client.GlobalConfiguration.Instance,
                new Immutable.Api.ZkEvm.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Immutable.Api.ZkEvm.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataSearchApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MetadataSearchApi(Immutable.Api.ZkEvm.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Immutable.Api.ZkEvm.Client.Configuration.MergeConfigurations(
                Immutable.Api.ZkEvm.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Immutable.Api.ZkEvm.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataSearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MetadataSearchApi(Immutable.Api.ZkEvm.Client.ISynchronousClient client, Immutable.Api.ZkEvm.Client.IAsynchronousClient asyncClient, Immutable.Api.ZkEvm.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Immutable.Api.ZkEvm.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get list of metadata attribute filters Get list of metadata filters
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">Contract addresses for collection</param>
        /// <returns>ListFiltersResult</returns>
        public ListFiltersResult ListFilters(string chainName, string contractAddress)
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<ListFiltersResult> localVarResponse = ListFiltersWithHttpInfo(chainName, contractAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of metadata attribute filters Get list of metadata filters
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">Contract addresses for collection</param>
        /// <returns>ApiResponse of ListFiltersResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<ListFiltersResult> ListFiltersWithHttpInfo(string chainName, string contractAddress)
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling MetadataSearchApi->ListFilters");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling MetadataSearchApi->ListFilters");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFiltersResult>("/v1/chains/{chain_name}/search/filters/{contract_address}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFilters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of metadata attribute filters Get list of metadata filters
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">Contract addresses for collection</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFiltersResult</returns>
        public async System.Threading.Tasks.Task<ListFiltersResult> ListFiltersAsync(string chainName, string contractAddress, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ListFiltersWithHttpInfoAsync(chainName, contractAddress, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<ListFiltersResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<ListFiltersResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of metadata attribute filters Get list of metadata filters
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">Contract addresses for collection</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFiltersResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<ListFiltersResult>> ListFiltersWithHttpInfoAsync(string chainName, string contractAddress, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling MetadataSearchApi->ListFilters");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling MetadataSearchApi->ListFilters");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.PathParameters.Add("contract_address", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(contractAddress)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListFiltersResult>("/v1/chains/{chain_name}/search/filters/{contract_address}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFilters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search NFTs Search NFTs
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="stackId">Filters NFTs that belong to any of these stacks (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether the listings should include only the owner created listings (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>SearchNFTsResult</returns>
        public SearchNFTsResult SearchNFTs(string chainName, List<string> contractAddress, string? accountAddress = default(string?), List<Guid>? stackId = default(List<Guid>?), bool? onlyIncludeOwnerListings = default(bool?), int? pageSize = default(int?), string? pageCursor = default(string?))
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<SearchNFTsResult> localVarResponse = SearchNFTsWithHttpInfo(chainName, contractAddress, accountAddress, stackId, onlyIncludeOwnerListings, pageSize, pageCursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search NFTs Search NFTs
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="stackId">Filters NFTs that belong to any of these stacks (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether the listings should include only the owner created listings (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of SearchNFTsResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<SearchNFTsResult> SearchNFTsWithHttpInfo(string chainName, List<string> contractAddress, string? accountAddress = default(string?), List<Guid>? stackId = default(List<Guid>?), bool? onlyIncludeOwnerListings = default(bool?), int? pageSize = default(int?), string? pageCursor = default(string?))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling MetadataSearchApi->SearchNFTs");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling MetadataSearchApi->SearchNFTs");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("multi", "contract_address", contractAddress));
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (stackId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("multi", "stack_id", stackId));
            }
            if (onlyIncludeOwnerListings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "only_include_owner_listings", onlyIncludeOwnerListings));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchNFTsResult>("/v1/chains/{chain_name}/search/nfts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search NFTs Search NFTs
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="stackId">Filters NFTs that belong to any of these stacks (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether the listings should include only the owner created listings (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchNFTsResult</returns>
        public async System.Threading.Tasks.Task<SearchNFTsResult> SearchNFTsAsync(string chainName, List<string> contractAddress, string? accountAddress = default(string?), List<Guid>? stackId = default(List<Guid>?), bool? onlyIncludeOwnerListings = default(bool?), int? pageSize = default(int?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = SearchNFTsWithHttpInfoAsync(chainName, contractAddress, accountAddress, stackId, onlyIncludeOwnerListings, pageSize, pageCursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<SearchNFTsResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<SearchNFTsResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search NFTs Search NFTs
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="stackId">Filters NFTs that belong to any of these stacks (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether the listings should include only the owner created listings (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchNFTsResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<SearchNFTsResult>> SearchNFTsWithHttpInfoAsync(string chainName, List<string> contractAddress, string? accountAddress = default(string?), List<Guid>? stackId = default(List<Guid>?), bool? onlyIncludeOwnerListings = default(bool?), int? pageSize = default(int?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling MetadataSearchApi->SearchNFTs");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling MetadataSearchApi->SearchNFTs");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("multi", "contract_address", contractAddress));
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (stackId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("multi", "stack_id", stackId));
            }
            if (onlyIncludeOwnerListings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "only_include_owner_listings", onlyIncludeOwnerListings));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<SearchNFTsResult>("/v1/chains/{chain_name}/search/nfts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search NFT stacks Search NFT stacks
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether to the listings should include only the owner created listings (optional)</param>
        /// <param name="onlyIfHasActiveListings">Filters results to include only stacks that have a current active listing. False and &#39;null&#39; return all unfiltered stacks. (optional)</param>
        /// <param name="traits">JSON encoded traits to filter by. e.g. encodeURIComponent(JSON.stringify({\&quot;rarity\&quot;: {\&quot;values\&quot;: [\&quot;common\&quot;, \&quot;rare\&quot;], \&quot;condition\&quot;: \&quot;eq\&quot;}})) (optional)</param>
        /// <param name="keyword">Keyword to search NFT name and description. Alphanumeric characters only. (optional)</param>
        /// <param name="sortBy">Sort results in a specific order (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>SearchStacksResult</returns>
        public SearchStacksResult SearchStacks(string chainName, List<string> contractAddress, string? accountAddress = default(string?), bool? onlyIncludeOwnerListings = default(bool?), bool? onlyIfHasActiveListings = default(bool?), string? traits = default(string?), string? keyword = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), string? pageCursor = default(string?))
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<SearchStacksResult> localVarResponse = SearchStacksWithHttpInfo(chainName, contractAddress, accountAddress, onlyIncludeOwnerListings, onlyIfHasActiveListings, traits, keyword, sortBy, pageSize, pageCursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search NFT stacks Search NFT stacks
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether to the listings should include only the owner created listings (optional)</param>
        /// <param name="onlyIfHasActiveListings">Filters results to include only stacks that have a current active listing. False and &#39;null&#39; return all unfiltered stacks. (optional)</param>
        /// <param name="traits">JSON encoded traits to filter by. e.g. encodeURIComponent(JSON.stringify({\&quot;rarity\&quot;: {\&quot;values\&quot;: [\&quot;common\&quot;, \&quot;rare\&quot;], \&quot;condition\&quot;: \&quot;eq\&quot;}})) (optional)</param>
        /// <param name="keyword">Keyword to search NFT name and description. Alphanumeric characters only. (optional)</param>
        /// <param name="sortBy">Sort results in a specific order (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <returns>ApiResponse of SearchStacksResult</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<SearchStacksResult> SearchStacksWithHttpInfo(string chainName, List<string> contractAddress, string? accountAddress = default(string?), bool? onlyIncludeOwnerListings = default(bool?), bool? onlyIfHasActiveListings = default(bool?), string? traits = default(string?), string? keyword = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), string? pageCursor = default(string?))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling MetadataSearchApi->SearchStacks");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling MetadataSearchApi->SearchStacks");

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("multi", "contract_address", contractAddress));
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (onlyIncludeOwnerListings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "only_include_owner_listings", onlyIncludeOwnerListings));
            }
            if (onlyIfHasActiveListings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "only_if_has_active_listings", onlyIfHasActiveListings));
            }
            if (traits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "traits", traits));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchStacksResult>("/v1/chains/{chain_name}/search/stacks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchStacks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search NFT stacks Search NFT stacks
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether to the listings should include only the owner created listings (optional)</param>
        /// <param name="onlyIfHasActiveListings">Filters results to include only stacks that have a current active listing. False and &#39;null&#39; return all unfiltered stacks. (optional)</param>
        /// <param name="traits">JSON encoded traits to filter by. e.g. encodeURIComponent(JSON.stringify({\&quot;rarity\&quot;: {\&quot;values\&quot;: [\&quot;common\&quot;, \&quot;rare\&quot;], \&quot;condition\&quot;: \&quot;eq\&quot;}})) (optional)</param>
        /// <param name="keyword">Keyword to search NFT name and description. Alphanumeric characters only. (optional)</param>
        /// <param name="sortBy">Sort results in a specific order (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchStacksResult</returns>
        public async System.Threading.Tasks.Task<SearchStacksResult> SearchStacksAsync(string chainName, List<string> contractAddress, string? accountAddress = default(string?), bool? onlyIncludeOwnerListings = default(bool?), bool? onlyIfHasActiveListings = default(bool?), string? traits = default(string?), string? keyword = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = SearchStacksWithHttpInfoAsync(chainName, contractAddress, accountAddress, onlyIncludeOwnerListings, onlyIfHasActiveListings, traits, keyword, sortBy, pageSize, pageCursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<SearchStacksResult> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<SearchStacksResult> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search NFT stacks Search NFT stacks
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainName">The name of chain</param>
        /// <param name="contractAddress">List of contract addresses to filter by</param>
        /// <param name="accountAddress">Account address to filter by (optional)</param>
        /// <param name="onlyIncludeOwnerListings">Whether to the listings should include only the owner created listings (optional)</param>
        /// <param name="onlyIfHasActiveListings">Filters results to include only stacks that have a current active listing. False and &#39;null&#39; return all unfiltered stacks. (optional)</param>
        /// <param name="traits">JSON encoded traits to filter by. e.g. encodeURIComponent(JSON.stringify({\&quot;rarity\&quot;: {\&quot;values\&quot;: [\&quot;common\&quot;, \&quot;rare\&quot;], \&quot;condition\&quot;: \&quot;eq\&quot;}})) (optional)</param>
        /// <param name="keyword">Keyword to search NFT name and description. Alphanumeric characters only. (optional)</param>
        /// <param name="sortBy">Sort results in a specific order (optional)</param>
        /// <param name="pageSize">Number of results to return per page (optional, default to 100)</param>
        /// <param name="pageCursor">Encoded page cursor to retrieve previous or next page. Use the value returned in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchStacksResult)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<SearchStacksResult>> SearchStacksWithHttpInfoAsync(string chainName, List<string> contractAddress, string? accountAddress = default(string?), bool? onlyIncludeOwnerListings = default(bool?), bool? onlyIfHasActiveListings = default(bool?), string? traits = default(string?), string? keyword = default(string?), string? sortBy = default(string?), int? pageSize = default(int?), string? pageCursor = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainName' is set
            if (chainName == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'chainName' when calling MetadataSearchApi->SearchStacks");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new Immutable.Api.ZkEvm.Client.ApiException(400, "Missing required parameter 'contractAddress' when calling MetadataSearchApi->SearchStacks");


            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain_name", Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToString(chainName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("multi", "contract_address", contractAddress));
            if (accountAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "account_address", accountAddress));
            }
            if (onlyIncludeOwnerListings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "only_include_owner_listings", onlyIncludeOwnerListings));
            }
            if (onlyIfHasActiveListings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "only_if_has_active_listings", onlyIfHasActiveListings));
            }
            if (traits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "traits", traits));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Immutable.Api.ZkEvm.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<SearchStacksResult>("/v1/chains/{chain_name}/search/stacks", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchStacks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
