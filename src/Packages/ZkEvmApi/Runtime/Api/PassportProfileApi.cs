/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Immutable.Api.ZkEvm.Client;
using Immutable.Api.ZkEvm.Model;

namespace Immutable.Api.ZkEvm.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPassportProfileApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all info for a Passport user
        /// </summary>
        /// <remarks>
        /// Get all the info for an authenticated Passport user
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserInfo</returns>
        UserInfo GetUserInfo();

        /// <summary>
        /// Get all info for a Passport user
        /// </summary>
        /// <remarks>
        /// Get all the info for an authenticated Passport user
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserInfo</returns>
        ApiResponse<UserInfo> GetUserInfoWithHttpInfo();
        /// <summary>
        /// Link wallet v2
        /// </summary>
        /// <remarks>
        /// Link an external EOA wallet to an Immutable Passport account by providing an EIP-712 signature.
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkWalletV2Request"> (optional)</param>
        /// <returns>Wallet</returns>
        Wallet LinkWalletV2(LinkWalletV2Request? linkWalletV2Request = default(LinkWalletV2Request?));

        /// <summary>
        /// Link wallet v2
        /// </summary>
        /// <remarks>
        /// Link an external EOA wallet to an Immutable Passport account by providing an EIP-712 signature.
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkWalletV2Request"> (optional)</param>
        /// <returns>ApiResponse of Wallet</returns>
        ApiResponse<Wallet> LinkWalletV2WithHttpInfo(LinkWalletV2Request? linkWalletV2Request = default(LinkWalletV2Request?));
        /// <summary>
        /// Send phone OTP code for user supplied phone number
        /// </summary>
        /// <remarks>
        /// Send phone OTP code for user supplied phone number
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberOTPRequest"> (optional)</param>
        /// <returns></returns>
        void SendPhoneOtp(PhoneNumberOTPRequest? phoneNumberOTPRequest = default(PhoneNumberOTPRequest?));

        /// <summary>
        /// Send phone OTP code for user supplied phone number
        /// </summary>
        /// <remarks>
        /// Send phone OTP code for user supplied phone number
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberOTPRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendPhoneOtpWithHttpInfo(PhoneNumberOTPRequest? phoneNumberOTPRequest = default(PhoneNumberOTPRequest?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPassportProfileApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get all info for a Passport user
        /// </summary>
        /// <remarks>
        /// Get all the info for an authenticated Passport user
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserInfo</returns>
        System.Threading.Tasks.Task<UserInfo> GetUserInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get all info for a Passport user
        /// </summary>
        /// <remarks>
        /// Get all the info for an authenticated Passport user
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfo>> GetUserInfoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Link wallet v2
        /// </summary>
        /// <remarks>
        /// Link an external EOA wallet to an Immutable Passport account by providing an EIP-712 signature.
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkWalletV2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Wallet</returns>
        System.Threading.Tasks.Task<Wallet> LinkWalletV2Async(LinkWalletV2Request? linkWalletV2Request = default(LinkWalletV2Request?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Link wallet v2
        /// </summary>
        /// <remarks>
        /// Link an external EOA wallet to an Immutable Passport account by providing an EIP-712 signature.
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkWalletV2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wallet>> LinkWalletV2WithHttpInfoAsync(LinkWalletV2Request? linkWalletV2Request = default(LinkWalletV2Request?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Send phone OTP code for user supplied phone number
        /// </summary>
        /// <remarks>
        /// Send phone OTP code for user supplied phone number
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberOTPRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendPhoneOtpAsync(PhoneNumberOTPRequest? phoneNumberOTPRequest = default(PhoneNumberOTPRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Send phone OTP code for user supplied phone number
        /// </summary>
        /// <remarks>
        /// Send phone OTP code for user supplied phone number
        /// </remarks>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberOTPRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendPhoneOtpWithHttpInfoAsync(PhoneNumberOTPRequest? phoneNumberOTPRequest = default(PhoneNumberOTPRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPassportProfileApi : IPassportProfileApiSync, IPassportProfileApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PassportProfileApi : IDisposable, IPassportProfileApi
    {
        private Immutable.Api.ZkEvm.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PassportProfileApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public PassportProfileApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PassportProfileApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public PassportProfileApi(string basePath)
        {
            this.Configuration = Immutable.Api.ZkEvm.Client.Configuration.MergeConfigurations(
                Immutable.Api.ZkEvm.Client.GlobalConfiguration.Instance,
                new Immutable.Api.ZkEvm.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Immutable.Api.ZkEvm.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PassportProfileApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public PassportProfileApi(Immutable.Api.ZkEvm.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Immutable.Api.ZkEvm.Client.Configuration.MergeConfigurations(
                Immutable.Api.ZkEvm.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Immutable.Api.ZkEvm.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PassportProfileApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public PassportProfileApi(Immutable.Api.ZkEvm.Client.ISynchronousClient client, Immutable.Api.ZkEvm.Client.IAsynchronousClient asyncClient, Immutable.Api.ZkEvm.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Immutable.Api.ZkEvm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Immutable.Api.ZkEvm.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Immutable.Api.ZkEvm.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get all info for a Passport user Get all the info for an authenticated Passport user
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserInfo</returns>
        public UserInfo GetUserInfo()
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<UserInfo> localVarResponse = GetUserInfoWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all info for a Passport user Get all the info for an authenticated Passport user
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserInfo</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<UserInfo> GetUserInfoWithHttpInfo()
        {
            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserInfo>("/passport-profile/v1/user/info", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all info for a Passport user Get all the info for an authenticated Passport user
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserInfo</returns>
        public async System.Threading.Tasks.Task<UserInfo> GetUserInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetUserInfoWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<UserInfo> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<UserInfo> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all info for a Passport user Get all the info for an authenticated Passport user
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserInfo)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<UserInfo>> GetUserInfoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<UserInfo>("/passport-profile/v1/user/info", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Link wallet v2 Link an external EOA wallet to an Immutable Passport account by providing an EIP-712 signature.
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkWalletV2Request"> (optional)</param>
        /// <returns>Wallet</returns>
        public Wallet LinkWalletV2(LinkWalletV2Request? linkWalletV2Request = default(LinkWalletV2Request?))
        {
            Immutable.Api.ZkEvm.Client.ApiResponse<Wallet> localVarResponse = LinkWalletV2WithHttpInfo(linkWalletV2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Link wallet v2 Link an external EOA wallet to an Immutable Passport account by providing an EIP-712 signature.
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkWalletV2Request"> (optional)</param>
        /// <returns>ApiResponse of Wallet</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<Wallet> LinkWalletV2WithHttpInfo(LinkWalletV2Request? linkWalletV2Request = default(LinkWalletV2Request?))
        {
            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = linkWalletV2Request;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Wallet>("/passport-profile/v2/linked-wallets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkWalletV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Link wallet v2 Link an external EOA wallet to an Immutable Passport account by providing an EIP-712 signature.
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkWalletV2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Wallet</returns>
        public async System.Threading.Tasks.Task<Wallet> LinkWalletV2Async(LinkWalletV2Request? linkWalletV2Request = default(LinkWalletV2Request?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = LinkWalletV2WithHttpInfoAsync(linkWalletV2Request, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Api.ZkEvm.Client.ApiResponse<Wallet> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Api.ZkEvm.Client.ApiResponse<Wallet> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Link wallet v2 Link an external EOA wallet to an Immutable Passport account by providing an EIP-712 signature.
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkWalletV2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<Wallet>> LinkWalletV2WithHttpInfoAsync(LinkWalletV2Request? linkWalletV2Request = default(LinkWalletV2Request?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = linkWalletV2Request;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Wallet>("/passport-profile/v2/linked-wallets", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkWalletV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send phone OTP code for user supplied phone number Send phone OTP code for user supplied phone number
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberOTPRequest"> (optional)</param>
        /// <returns></returns>
        public void SendPhoneOtp(PhoneNumberOTPRequest? phoneNumberOTPRequest = default(PhoneNumberOTPRequest?))
        {
            SendPhoneOtpWithHttpInfo(phoneNumberOTPRequest);
        }

        /// <summary>
        /// Send phone OTP code for user supplied phone number Send phone OTP code for user supplied phone number
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberOTPRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Immutable.Api.ZkEvm.Client.ApiResponse<Object> SendPhoneOtpWithHttpInfo(PhoneNumberOTPRequest? phoneNumberOTPRequest = default(PhoneNumberOTPRequest?))
        {
            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = phoneNumberOTPRequest;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/passport-profile/v1/phone-otp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendPhoneOtp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send phone OTP code for user supplied phone number Send phone OTP code for user supplied phone number
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberOTPRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendPhoneOtpAsync(PhoneNumberOTPRequest? phoneNumberOTPRequest = default(PhoneNumberOTPRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = SendPhoneOtpWithHttpInfoAsync(phoneNumberOTPRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        /// Send phone OTP code for user supplied phone number Send phone OTP code for user supplied phone number
        /// </summary>
        /// <exception cref="Immutable.Api.ZkEvm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberOTPRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Immutable.Api.ZkEvm.Client.ApiResponse<Object>> SendPhoneOtpWithHttpInfoAsync(PhoneNumberOTPRequest? phoneNumberOTPRequest = default(PhoneNumberOTPRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Api.ZkEvm.Client.RequestOptions localVarRequestOptions = new Immutable.Api.ZkEvm.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Api.ZkEvm.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = phoneNumberOTPRequest;

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/passport-profile/v1/phone-otp", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendPhoneOtp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
