/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// SignCraftingRequest
    /// </summary>
    [DataContract(Name = "SignCraftingRequest")]
    public partial class SignCraftingRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignCraftingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignCraftingRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignCraftingRequest" /> class.
        /// </summary>
        /// <param name="multiCaller">multiCaller (required).</param>
        /// <param name="referenceId">The id of this request in the system that originates the crafting request, specified as a 32 byte hex string (required).</param>
        /// <param name="calls">The calls to be signed (required).</param>
        /// <param name="expiresAt">The expiration time of the request (required).</param>
        public SignCraftingRequest(SignCraftingRequestMultiCaller multiCaller = default(SignCraftingRequestMultiCaller), string referenceId = default(string), List<Call> calls = default(List<Call>), DateTime expiresAt = default(DateTime))
        {
            // to ensure "multiCaller" is required (not null)
            if (multiCaller == null)
            {
                throw new ArgumentNullException("multiCaller is a required property for SignCraftingRequest and cannot be null");
            }
            this.MultiCaller = multiCaller;
            // to ensure "referenceId" is required (not null)
            if (referenceId == null)
            {
                throw new ArgumentNullException("referenceId is a required property for SignCraftingRequest and cannot be null");
            }
            this.ReferenceId = referenceId;
            // to ensure "calls" is required (not null)
            if (calls == null)
            {
                throw new ArgumentNullException("calls is a required property for SignCraftingRequest and cannot be null");
            }
            this.Calls = calls;
            this.ExpiresAt = expiresAt;
        }

        /// <summary>
        /// Gets or Sets MultiCaller
        /// </summary>
        [DataMember(Name = "multi_caller", IsRequired = true, EmitDefaultValue = true)]
        public SignCraftingRequestMultiCaller MultiCaller { get; set; }

        /// <summary>
        /// The id of this request in the system that originates the crafting request, specified as a 32 byte hex string
        /// </summary>
        /// <value>The id of this request in the system that originates the crafting request, specified as a 32 byte hex string</value>
        /// <example>67f7d464b8f04f6a9a3b8d3cb4a21af0</example>
        [DataMember(Name = "reference_id", IsRequired = true, EmitDefaultValue = true)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// The calls to be signed
        /// </summary>
        /// <value>The calls to be signed</value>
        [DataMember(Name = "calls", IsRequired = true, EmitDefaultValue = true)]
        public List<Call> Calls { get; set; }

        /// <summary>
        /// The expiration time of the request
        /// </summary>
        /// <value>The expiration time of the request</value>
        /// <example>2022-08-16T17:43:26.991388Z</example>
        [DataMember(Name = "expires_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignCraftingRequest {\n");
            sb.Append("  MultiCaller: ").Append(MultiCaller).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  Calls: ").Append(Calls).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
