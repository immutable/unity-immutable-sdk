/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// The ratio of the order that has been filled, an order that has been fully filled will have the same numerator and denominator values.
    /// </summary>
    [DataContract(Name = "FillStatus")]
    public partial class FillStatus
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FillStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FillStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FillStatus" /> class.
        /// </summary>
        /// <param name="numerator">The numerator of the fill status (required).</param>
        /// <param name="denominator">The denominator of the fill status (required).</param>
        public FillStatus(string numerator = default(string), string denominator = default(string))
        {
            // to ensure "numerator" is required (not null)
            if (numerator == null)
            {
                throw new ArgumentNullException("numerator is a required property for FillStatus and cannot be null");
            }
            this.Numerator = numerator;
            // to ensure "denominator" is required (not null)
            if (denominator == null)
            {
                throw new ArgumentNullException("denominator is a required property for FillStatus and cannot be null");
            }
            this.Denominator = denominator;
        }

        /// <summary>
        /// The numerator of the fill status
        /// </summary>
        /// <value>The numerator of the fill status</value>
        /// <example>1</example>
        [DataMember(Name = "numerator", IsRequired = true, EmitDefaultValue = true)]
        public string Numerator { get; set; }

        /// <summary>
        /// The denominator of the fill status
        /// </summary>
        /// <value>The denominator of the fill status</value>
        /// <example>2</example>
        [DataMember(Name = "denominator", IsRequired = true, EmitDefaultValue = true)]
        public string Denominator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FillStatus {\n");
            sb.Append("  Numerator: ").Append(Numerator).Append("\n");
            sb.Append("  Denominator: ").Append(Denominator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
