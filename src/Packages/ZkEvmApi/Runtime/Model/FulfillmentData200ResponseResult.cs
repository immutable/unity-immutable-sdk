/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// FulfillmentData200ResponseResult
    /// </summary>
    [DataContract(Name = "fulfillment_data_200_response_result")]
    public partial class FulfillmentData200ResponseResult
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentData200ResponseResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentData200ResponseResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentData200ResponseResult" /> class.
        /// </summary>
        /// <param name="fulfillableOrders">fulfillableOrders (required).</param>
        /// <param name="unfulfillableOrders">unfulfillableOrders (required).</param>
        public FulfillmentData200ResponseResult(List<FulfillableOrder> fulfillableOrders = default(List<FulfillableOrder>), List<UnfulfillableOrder> unfulfillableOrders = default(List<UnfulfillableOrder>))
        {
            // to ensure "fulfillableOrders" is required (not null)
            if (fulfillableOrders == null)
            {
                throw new ArgumentNullException("fulfillableOrders is a required property for FulfillmentData200ResponseResult and cannot be null");
            }
            this.FulfillableOrders = fulfillableOrders;
            // to ensure "unfulfillableOrders" is required (not null)
            if (unfulfillableOrders == null)
            {
                throw new ArgumentNullException("unfulfillableOrders is a required property for FulfillmentData200ResponseResult and cannot be null");
            }
            this.UnfulfillableOrders = unfulfillableOrders;
        }

        /// <summary>
        /// Gets or Sets FulfillableOrders
        /// </summary>
        [DataMember(Name = "fulfillable_orders", IsRequired = true, EmitDefaultValue = true)]
        public List<FulfillableOrder> FulfillableOrders { get; set; }

        /// <summary>
        /// Gets or Sets UnfulfillableOrders
        /// </summary>
        [DataMember(Name = "unfulfillable_orders", IsRequired = true, EmitDefaultValue = true)]
        public List<UnfulfillableOrder> UnfulfillableOrders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillmentData200ResponseResult {\n");
            sb.Append("  FulfillableOrders: ").Append(FulfillableOrders).Append("\n");
            sb.Append("  UnfulfillableOrders: ").Append(UnfulfillableOrders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
