/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// ActivityNFT
    /// </summary>
    [DataContract(Name = "ActivityNFT")]
    public partial class ActivityNFT
    {

        /// <summary>
        /// Gets or Sets ContractType
        /// </summary>
        [DataMember(Name = "contract_type", IsRequired = true, EmitDefaultValue = true)]
        public NFTContractType ContractType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityNFT" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivityNFT() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityNFT" /> class.
        /// </summary>
        /// <param name="contractType">contractType (required).</param>
        /// <param name="contractAddress">The token contract address (required).</param>
        /// <param name="tokenId">An &#x60;uint256&#x60; token id as string (required).</param>
        /// <param name="amount">(deprecated - will never be filled, use amount on Activity instead) The amount of tokens exchanged (required).</param>
        public ActivityNFT(NFTContractType contractType = default(NFTContractType), string contractAddress = default(string), string tokenId = default(string), string amount = default(string))
        {
            this.ContractType = contractType;
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new ArgumentNullException("contractAddress is a required property for ActivityNFT and cannot be null");
            }
            this.ContractAddress = contractAddress;
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for ActivityNFT and cannot be null");
            }
            this.TokenId = tokenId;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for ActivityNFT and cannot be null");
            }
            this.Amount = amount;
        }

        /// <summary>
        /// The token contract address
        /// </summary>
        /// <value>The token contract address</value>
        /// <example>0x8a90cab2b38dba80c64b7734e58ee1db38b8992e</example>
        [DataMember(Name = "contract_address", IsRequired = true, EmitDefaultValue = true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// An &#x60;uint256&#x60; token id as string
        /// </summary>
        /// <value>An &#x60;uint256&#x60; token id as string</value>
        /// <example>1</example>
        [DataMember(Name = "token_id", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// (deprecated - will never be filled, use amount on Activity instead) The amount of tokens exchanged
        /// </summary>
        /// <value>(deprecated - will never be filled, use amount on Activity instead) The amount of tokens exchanged</value>
        /// <example>1</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivityNFT {\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
