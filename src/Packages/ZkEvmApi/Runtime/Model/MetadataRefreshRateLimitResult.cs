/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// MetadataRefreshRateLimitResult
    /// </summary>
    [DataContract(Name = "MetadataRefreshRateLimitResult")]
    public partial class MetadataRefreshRateLimitResult
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRefreshRateLimitResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetadataRefreshRateLimitResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRefreshRateLimitResult" /> class.
        /// </summary>
        /// <param name="imxRefreshesLimit">imxRefreshesLimit (required).</param>
        /// <param name="imxRefreshLimitReset">imxRefreshLimitReset (required).</param>
        /// <param name="imxRemainingRefreshes">imxRemainingRefreshes (required).</param>
        /// <param name="retryAfter">retryAfter (required).</param>
        public MetadataRefreshRateLimitResult(string imxRefreshesLimit = default(string), string imxRefreshLimitReset = default(string), string imxRemainingRefreshes = default(string), string retryAfter = default(string))
        {
            // to ensure "imxRefreshesLimit" is required (not null)
            if (imxRefreshesLimit == null)
            {
                throw new ArgumentNullException("imxRefreshesLimit is a required property for MetadataRefreshRateLimitResult and cannot be null");
            }
            this.ImxRefreshesLimit = imxRefreshesLimit;
            // to ensure "imxRefreshLimitReset" is required (not null)
            if (imxRefreshLimitReset == null)
            {
                throw new ArgumentNullException("imxRefreshLimitReset is a required property for MetadataRefreshRateLimitResult and cannot be null");
            }
            this.ImxRefreshLimitReset = imxRefreshLimitReset;
            // to ensure "imxRemainingRefreshes" is required (not null)
            if (imxRemainingRefreshes == null)
            {
                throw new ArgumentNullException("imxRemainingRefreshes is a required property for MetadataRefreshRateLimitResult and cannot be null");
            }
            this.ImxRemainingRefreshes = imxRemainingRefreshes;
            // to ensure "retryAfter" is required (not null)
            if (retryAfter == null)
            {
                throw new ArgumentNullException("retryAfter is a required property for MetadataRefreshRateLimitResult and cannot be null");
            }
            this.RetryAfter = retryAfter;
        }

        /// <summary>
        /// Gets or Sets ImxRefreshesLimit
        /// </summary>
        [DataMember(Name = "imx_refreshes_limit", IsRequired = true, EmitDefaultValue = true)]
        public string ImxRefreshesLimit { get; set; }

        /// <summary>
        /// Gets or Sets ImxRefreshLimitReset
        /// </summary>
        [DataMember(Name = "imx_refresh_limit_reset", IsRequired = true, EmitDefaultValue = true)]
        public string ImxRefreshLimitReset { get; set; }

        /// <summary>
        /// Gets or Sets ImxRemainingRefreshes
        /// </summary>
        [DataMember(Name = "imx_remaining_refreshes", IsRequired = true, EmitDefaultValue = true)]
        public string ImxRemainingRefreshes { get; set; }

        /// <summary>
        /// Gets or Sets RetryAfter
        /// </summary>
        [DataMember(Name = "retry_after", IsRequired = true, EmitDefaultValue = true)]
        public string RetryAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetadataRefreshRateLimitResult {\n");
            sb.Append("  ImxRefreshesLimit: ").Append(ImxRefreshesLimit).Append("\n");
            sb.Append("  ImxRefreshLimitReset: ").Append(ImxRefreshLimitReset).Append("\n");
            sb.Append("  ImxRemainingRefreshes: ").Append(ImxRemainingRefreshes).Append("\n");
            sb.Append("  RetryAfter: ").Append(RetryAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
