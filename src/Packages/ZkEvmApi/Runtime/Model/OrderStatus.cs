/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// The Order status
    /// </summary>
    [JsonConverter(typeof(OrderStatusJsonConverter))]
    [DataContract(Name = "OrderStatus")]
    public partial class OrderStatus : AbstractOpenAPISchema
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus" /> class
        /// with the <see cref="CancelledOrderStatus" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CancelledOrderStatus.</param>
        public OrderStatus(CancelledOrderStatus actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus" /> class
        /// with the <see cref="PendingOrderStatus" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PendingOrderStatus.</param>
        public OrderStatus(PendingOrderStatus actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus" /> class
        /// with the <see cref="ActiveOrderStatus" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ActiveOrderStatus.</param>
        public OrderStatus(ActiveOrderStatus actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus" /> class
        /// with the <see cref="InactiveOrderStatus" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of InactiveOrderStatus.</param>
        public OrderStatus(InactiveOrderStatus actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus" /> class
        /// with the <see cref="FilledOrderStatus" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of FilledOrderStatus.</param>
        public OrderStatus(FilledOrderStatus actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus" /> class
        /// with the <see cref="ExpiredOrderStatus" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ExpiredOrderStatus.</param>
        public OrderStatus(ExpiredOrderStatus actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ActiveOrderStatus) || value is ActiveOrderStatus)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CancelledOrderStatus) || value is CancelledOrderStatus)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ExpiredOrderStatus) || value is ExpiredOrderStatus)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(FilledOrderStatus) || value is FilledOrderStatus)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(InactiveOrderStatus) || value is InactiveOrderStatus)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PendingOrderStatus) || value is PendingOrderStatus)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ActiveOrderStatus, CancelledOrderStatus, ExpiredOrderStatus, FilledOrderStatus, InactiveOrderStatus, PendingOrderStatus");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `CancelledOrderStatus`. If the actual instance is not `CancelledOrderStatus`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CancelledOrderStatus</returns>
        public CancelledOrderStatus GetCancelledOrderStatus()
        {
            return (CancelledOrderStatus)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PendingOrderStatus`. If the actual instance is not `PendingOrderStatus`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PendingOrderStatus</returns>
        public PendingOrderStatus GetPendingOrderStatus()
        {
            return (PendingOrderStatus)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ActiveOrderStatus`. If the actual instance is not `ActiveOrderStatus`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ActiveOrderStatus</returns>
        public ActiveOrderStatus GetActiveOrderStatus()
        {
            return (ActiveOrderStatus)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `InactiveOrderStatus`. If the actual instance is not `InactiveOrderStatus`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of InactiveOrderStatus</returns>
        public InactiveOrderStatus GetInactiveOrderStatus()
        {
            return (InactiveOrderStatus)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `FilledOrderStatus`. If the actual instance is not `FilledOrderStatus`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of FilledOrderStatus</returns>
        public FilledOrderStatus GetFilledOrderStatus()
        {
            return (FilledOrderStatus)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ExpiredOrderStatus`. If the actual instance is not `ExpiredOrderStatus`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ExpiredOrderStatus</returns>
        public ExpiredOrderStatus GetExpiredOrderStatus()
        {
            return (ExpiredOrderStatus)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderStatus {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, OrderStatus.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of OrderStatus
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of OrderStatus</returns>
        public static OrderStatus FromJson(string jsonString)
        {
            OrderStatus newOrderStatus = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newOrderStatus;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ActiveOrderStatus).GetProperty("AdditionalProperties") == null)
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<ActiveOrderStatus>(jsonString, OrderStatus.SerializerSettings));
                }
                else
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<ActiveOrderStatus>(jsonString, OrderStatus.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ActiveOrderStatus");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ActiveOrderStatus: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CancelledOrderStatus).GetProperty("AdditionalProperties") == null)
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<CancelledOrderStatus>(jsonString, OrderStatus.SerializerSettings));
                }
                else
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<CancelledOrderStatus>(jsonString, OrderStatus.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CancelledOrderStatus");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CancelledOrderStatus: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ExpiredOrderStatus).GetProperty("AdditionalProperties") == null)
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<ExpiredOrderStatus>(jsonString, OrderStatus.SerializerSettings));
                }
                else
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<ExpiredOrderStatus>(jsonString, OrderStatus.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ExpiredOrderStatus");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ExpiredOrderStatus: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(FilledOrderStatus).GetProperty("AdditionalProperties") == null)
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<FilledOrderStatus>(jsonString, OrderStatus.SerializerSettings));
                }
                else
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<FilledOrderStatus>(jsonString, OrderStatus.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("FilledOrderStatus");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into FilledOrderStatus: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(InactiveOrderStatus).GetProperty("AdditionalProperties") == null)
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<InactiveOrderStatus>(jsonString, OrderStatus.SerializerSettings));
                }
                else
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<InactiveOrderStatus>(jsonString, OrderStatus.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("InactiveOrderStatus");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into InactiveOrderStatus: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PendingOrderStatus).GetProperty("AdditionalProperties") == null)
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<PendingOrderStatus>(jsonString, OrderStatus.SerializerSettings));
                }
                else
                {
                    newOrderStatus = new OrderStatus(JsonConvert.DeserializeObject<PendingOrderStatus>(jsonString, OrderStatus.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PendingOrderStatus");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PendingOrderStatus: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newOrderStatus;
        }

    }

    /// <summary>
    /// Custom JSON converter for OrderStatus
    /// </summary>
    public class OrderStatusJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(OrderStatus).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return OrderStatus.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return OrderStatus.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
