/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// CancelOrdersRequestBody
    /// </summary>
    [DataContract(Name = "CancelOrdersRequestBody")]
    public partial class CancelOrdersRequestBody
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelOrdersRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CancelOrdersRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelOrdersRequestBody" /> class.
        /// </summary>
        /// <param name="accountAddress">Address of the user initiating the cancel request (required).</param>
        /// <param name="orders">List of order ids proposed for cancellation (required).</param>
        /// <param name="signature">Signature generated by the user for the specific cancellation request (required).</param>
        public CancelOrdersRequestBody(string accountAddress = default(string), List<Guid> orders = default(List<Guid>), string signature = default(string))
        {
            // to ensure "accountAddress" is required (not null)
            if (accountAddress == null)
            {
                throw new ArgumentNullException("accountAddress is a required property for CancelOrdersRequestBody and cannot be null");
            }
            this.AccountAddress = accountAddress;
            // to ensure "orders" is required (not null)
            if (orders == null)
            {
                throw new ArgumentNullException("orders is a required property for CancelOrdersRequestBody and cannot be null");
            }
            this.Orders = orders;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for CancelOrdersRequestBody and cannot be null");
            }
            this.Signature = signature;
        }

        /// <summary>
        /// Address of the user initiating the cancel request
        /// </summary>
        /// <value>Address of the user initiating the cancel request</value>
        /// <example>0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266</example>
        [DataMember(Name = "account_address", IsRequired = true, EmitDefaultValue = true)]
        public string AccountAddress { get; set; }

        /// <summary>
        /// List of order ids proposed for cancellation
        /// </summary>
        /// <value>List of order ids proposed for cancellation</value>
        [DataMember(Name = "orders", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> Orders { get; set; }

        /// <summary>
        /// Signature generated by the user for the specific cancellation request
        /// </summary>
        /// <value>Signature generated by the user for the specific cancellation request</value>
        /// <example>0x12345</example>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CancelOrdersRequestBody {\n");
            sb.Append("  AccountAddress: ").Append(AccountAddress).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
