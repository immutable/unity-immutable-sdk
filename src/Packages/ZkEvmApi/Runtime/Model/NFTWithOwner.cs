/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// NFTWithOwner
    /// </summary>
    [DataContract(Name = "NFTWithOwner")]
    public partial class NFTWithOwner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NFTWithOwner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NFTWithOwner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NFTWithOwner" /> class.
        /// </summary>
        /// <param name="chain">chain (required).</param>
        /// <param name="contractAddress">The address of NFT contract (required).</param>
        /// <param name="tokenId">An &#x60;uint256&#x60; token id as string (required).</param>
        /// <param name="accountAddress">The account address of the owner of the NFT (required).</param>
        /// <param name="balance">The amount of owned tokens (uint256 as string) (required).</param>
        /// <param name="updatedAt">When the owner last changed for the given NFT (required).</param>
        public NFTWithOwner(Chain chain = default(Chain), string contractAddress = default(string), string tokenId = default(string), string accountAddress = default(string), string balance = default(string), DateTime updatedAt = default(DateTime))
        {
            // to ensure "chain" is required (not null)
            if (chain == null)
            {
                throw new ArgumentNullException("chain is a required property for NFTWithOwner and cannot be null");
            }
            this.Chain = chain;
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new ArgumentNullException("contractAddress is a required property for NFTWithOwner and cannot be null");
            }
            this.ContractAddress = contractAddress;
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for NFTWithOwner and cannot be null");
            }
            this.TokenId = tokenId;
            // to ensure "accountAddress" is required (not null)
            if (accountAddress == null)
            {
                throw new ArgumentNullException("accountAddress is a required property for NFTWithOwner and cannot be null");
            }
            this.AccountAddress = accountAddress;
            // to ensure "balance" is required (not null)
            if (balance == null)
            {
                throw new ArgumentNullException("balance is a required property for NFTWithOwner and cannot be null");
            }
            this.Balance = balance;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets Chain
        /// </summary>
        [DataMember(Name = "chain", IsRequired = true, EmitDefaultValue = true)]
        public Chain Chain { get; set; }

        /// <summary>
        /// The address of NFT contract
        /// </summary>
        /// <value>The address of NFT contract</value>
        /// <example>0x5a019874f4fae314b0eaa4606be746366e661306</example>
        [DataMember(Name = "contract_address", IsRequired = true, EmitDefaultValue = true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// An &#x60;uint256&#x60; token id as string
        /// </summary>
        /// <value>An &#x60;uint256&#x60; token id as string</value>
        /// <example>1</example>
        [DataMember(Name = "token_id", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// The account address of the owner of the NFT
        /// </summary>
        /// <value>The account address of the owner of the NFT</value>
        /// <example>0x5a019874f4fae314b0eaa4606be746366e661306</example>
        [DataMember(Name = "account_address", IsRequired = true, EmitDefaultValue = true)]
        public string AccountAddress { get; set; }

        /// <summary>
        /// The amount of owned tokens (uint256 as string)
        /// </summary>
        /// <value>The amount of owned tokens (uint256 as string)</value>
        /// <example>1</example>
        [DataMember(Name = "balance", IsRequired = true, EmitDefaultValue = true)]
        public string Balance { get; set; }

        /// <summary>
        /// When the owner last changed for the given NFT
        /// </summary>
        /// <value>When the owner last changed for the given NFT</value>
        /// <example>2022-08-16T17:43:26.991388Z</example>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NFTWithOwner {\n");
            sb.Append("  Chain: ").Append(Chain).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  AccountAddress: ").Append(AccountAddress).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
