/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// Call
    /// </summary>
    [DataContract(Name = "Call")]
    public partial class Call
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Call" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Call() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Call" /> class.
        /// </summary>
        /// <param name="targetAddress">An Ethereum address (required).</param>
        /// <param name="functionSignature">The function signature (required).</param>
        /// <param name="functionArgs">The function arguments (required).</param>
        public Call(string targetAddress = default(string), string functionSignature = default(string), List<string> functionArgs = default(List<string>))
        {
            // to ensure "targetAddress" is required (not null)
            if (targetAddress == null)
            {
                throw new ArgumentNullException("targetAddress is a required property for Call and cannot be null");
            }
            this.TargetAddress = targetAddress;
            // to ensure "functionSignature" is required (not null)
            if (functionSignature == null)
            {
                throw new ArgumentNullException("functionSignature is a required property for Call and cannot be null");
            }
            this.FunctionSignature = functionSignature;
            // to ensure "functionArgs" is required (not null)
            if (functionArgs == null)
            {
                throw new ArgumentNullException("functionArgs is a required property for Call and cannot be null");
            }
            this.FunctionArgs = functionArgs;
        }

        /// <summary>
        /// An Ethereum address
        /// </summary>
        /// <value>An Ethereum address</value>
        /// <example>0xe9b00a87700f660e46b6f5deaa1232836bcc07d3</example>
        [DataMember(Name = "target_address", IsRequired = true, EmitDefaultValue = true)]
        public string TargetAddress { get; set; }

        /// <summary>
        /// The function signature
        /// </summary>
        /// <value>The function signature</value>
        /// <example>mint(address,uint256)</example>
        [DataMember(Name = "function_signature", IsRequired = true, EmitDefaultValue = true)]
        public string FunctionSignature { get; set; }

        /// <summary>
        /// The function arguments
        /// </summary>
        /// <value>The function arguments</value>
        /// <example>[&quot;0x8a90cab2b38dba80c64b7734e58ee1db38b8992e&quot;,&quot;1&quot;]</example>
        [DataMember(Name = "function_args", IsRequired = true, EmitDefaultValue = true)]
        public List<string> FunctionArgs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Call {\n");
            sb.Append("  TargetAddress: ").Append(TargetAddress).Append("\n");
            sb.Append("  FunctionSignature: ").Append(FunctionSignature).Append("\n");
            sb.Append("  FunctionArgs: ").Append(FunctionArgs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
