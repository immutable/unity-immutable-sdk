/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// SignCraftingRequestMultiCaller
    /// </summary>
    [DataContract(Name = "SignCraftingRequest_multi_caller")]
    public partial class SignCraftingRequestMultiCaller
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignCraftingRequestMultiCaller" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignCraftingRequestMultiCaller() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignCraftingRequestMultiCaller" /> class.
        /// </summary>
        /// <param name="address">An Ethereum address (required).</param>
        /// <param name="name">The name of the multicaller contract (required).</param>
        /// <param name="varVersion">The version of the multicaller contract (required).</param>
        public SignCraftingRequestMultiCaller(string address = default(string), string name = default(string), string varVersion = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for SignCraftingRequestMultiCaller and cannot be null");
            }
            this.Address = address;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SignCraftingRequestMultiCaller and cannot be null");
            }
            this.Name = name;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for SignCraftingRequestMultiCaller and cannot be null");
            }
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// An Ethereum address
        /// </summary>
        /// <value>An Ethereum address</value>
        /// <example>0xe9b00a87700f660e46b6f5deaa1232836bcc07d3</example>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// The name of the multicaller contract
        /// </summary>
        /// <value>The name of the multicaller contract</value>
        /// <example>Multicaller</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The version of the multicaller contract
        /// </summary>
        /// <value>The version of the multicaller contract</value>
        /// <example>1</example>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignCraftingRequestMultiCaller {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
