/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// Link wallet V2 request
    /// </summary>
    [DataContract(Name = "LinkWalletV2Request")]
    public partial class LinkWalletV2Request
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkWalletV2Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkWalletV2Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkWalletV2Request" /> class.
        /// </summary>
        /// <param name="type">This should be the EIP-6963 rdns value, if you&#39;re unable to get the rdns value you can provide \&quot;External\&quot;. If using WalletConnect then provide \&quot;WalletConnect\&quot;. (required).</param>
        /// <param name="walletAddress">The address of the external wallet being linked to Passport (required).</param>
        /// <param name="signature">The EIP-712 signature (required).</param>
        /// <param name="nonce">A unique identifier for the signature (required).</param>
        public LinkWalletV2Request(string type = default(string), string walletAddress = default(string), string signature = default(string), string nonce = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for LinkWalletV2Request and cannot be null");
            }
            this.Type = type;
            // to ensure "walletAddress" is required (not null)
            if (walletAddress == null)
            {
                throw new ArgumentNullException("walletAddress is a required property for LinkWalletV2Request and cannot be null");
            }
            this.WalletAddress = walletAddress;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for LinkWalletV2Request and cannot be null");
            }
            this.Signature = signature;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for LinkWalletV2Request and cannot be null");
            }
            this.Nonce = nonce;
        }

        /// <summary>
        /// This should be the EIP-6963 rdns value, if you&#39;re unable to get the rdns value you can provide \&quot;External\&quot;. If using WalletConnect then provide \&quot;WalletConnect\&quot;.
        /// </summary>
        /// <value>This should be the EIP-6963 rdns value, if you&#39;re unable to get the rdns value you can provide \&quot;External\&quot;. If using WalletConnect then provide \&quot;WalletConnect\&quot;.</value>
        /// <example>io.metamask</example>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The address of the external wallet being linked to Passport
        /// </summary>
        /// <value>The address of the external wallet being linked to Passport</value>
        /// <example>0xd8da6bf26964af9d7eed9e03e53415d37aa96045</example>
        [DataMember(Name = "wallet_address", IsRequired = true, EmitDefaultValue = true)]
        public string WalletAddress { get; set; }

        /// <summary>
        /// The EIP-712 signature
        /// </summary>
        /// <value>The EIP-712 signature</value>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// A unique identifier for the signature
        /// </summary>
        /// <value>A unique identifier for the signature</value>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkWalletV2Request {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WalletAddress: ").Append(WalletAddress).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
