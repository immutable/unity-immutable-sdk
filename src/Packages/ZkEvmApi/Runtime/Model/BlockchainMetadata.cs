/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// The metadata related to blockchain transaction
    /// </summary>
    [DataContract(Name = "BlockchainMetadata")]
    public partial class BlockchainMetadata
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BlockchainMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainMetadata" /> class.
        /// </summary>
        /// <param name="transactionHash">The transaction hash of the activity (required).</param>
        /// <param name="blockNumber">EVM block number (uint64 as string) (required).</param>
        /// <param name="transactionIndex">Transaction index in a block (uint32 as string) (required).</param>
        /// <param name="logIndex">The log index of activity in a block (uint32 as string) (required).</param>
        public BlockchainMetadata(string transactionHash = default(string), string blockNumber = default(string), string transactionIndex = default(string), string logIndex = default(string))
        {
            // to ensure "transactionHash" is required (not null)
            if (transactionHash == null)
            {
                throw new ArgumentNullException("transactionHash is a required property for BlockchainMetadata and cannot be null");
            }
            this.TransactionHash = transactionHash;
            // to ensure "blockNumber" is required (not null)
            if (blockNumber == null)
            {
                throw new ArgumentNullException("blockNumber is a required property for BlockchainMetadata and cannot be null");
            }
            this.BlockNumber = blockNumber;
            // to ensure "transactionIndex" is required (not null)
            if (transactionIndex == null)
            {
                throw new ArgumentNullException("transactionIndex is a required property for BlockchainMetadata and cannot be null");
            }
            this.TransactionIndex = transactionIndex;
            // to ensure "logIndex" is required (not null)
            if (logIndex == null)
            {
                throw new ArgumentNullException("logIndex is a required property for BlockchainMetadata and cannot be null");
            }
            this.LogIndex = logIndex;
        }

        /// <summary>
        /// The transaction hash of the activity
        /// </summary>
        /// <value>The transaction hash of the activity</value>
        /// <example>0x68d9eac5e3b3c3580404989a4030c948a78e1b07b2b5ea5688d8c38a6c61c93e</example>
        [DataMember(Name = "transaction_hash", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionHash { get; set; }

        /// <summary>
        /// EVM block number (uint64 as string)
        /// </summary>
        /// <value>EVM block number (uint64 as string)</value>
        /// <example>1</example>
        [DataMember(Name = "block_number", IsRequired = true, EmitDefaultValue = true)]
        public string BlockNumber { get; set; }

        /// <summary>
        /// Transaction index in a block (uint32 as string)
        /// </summary>
        /// <value>Transaction index in a block (uint32 as string)</value>
        /// <example>1</example>
        [DataMember(Name = "transaction_index", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionIndex { get; set; }

        /// <summary>
        /// The log index of activity in a block (uint32 as string)
        /// </summary>
        /// <value>The log index of activity in a block (uint32 as string)</value>
        /// <example>1</example>
        [DataMember(Name = "log_index", IsRequired = true, EmitDefaultValue = true)]
        public string LogIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockchainMetadata {\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  TransactionIndex: ").Append(TransactionIndex).Append("\n");
            sb.Append("  LogIndex: ").Append(LogIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
