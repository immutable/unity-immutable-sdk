/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// Market Price details
    /// </summary>
    [DataContract(Name = "MarketPriceDetails")]
    public partial class MarketPriceDetails
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketPriceDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarketPriceDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketPriceDetails" /> class.
        /// </summary>
        /// <param name="token">token (required).</param>
        /// <param name="amount">The token amount value. This value is provided in the smallest unit of the token (e.g. wei for ETH) (required).</param>
        /// <param name="feeInclusiveAmount">The token amount value. This value is provided in the smallest unit of the token (e.g. wei for ETH) (required).</param>
        /// <param name="fees">fees (required).</param>
        public MarketPriceDetails(MarketPriceDetailsToken token = default(MarketPriceDetailsToken), string amount = default(string), string feeInclusiveAmount = default(string), List<MarketPriceFees> fees = default(List<MarketPriceFees>))
        {
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new ArgumentNullException("token is a required property for MarketPriceDetails and cannot be null");
            }
            this.Token = token;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for MarketPriceDetails and cannot be null");
            }
            this.Amount = amount;
            // to ensure "feeInclusiveAmount" is required (not null)
            if (feeInclusiveAmount == null)
            {
                throw new ArgumentNullException("feeInclusiveAmount is a required property for MarketPriceDetails and cannot be null");
            }
            this.FeeInclusiveAmount = feeInclusiveAmount;
            // to ensure "fees" is required (not null)
            if (fees == null)
            {
                throw new ArgumentNullException("fees is a required property for MarketPriceDetails and cannot be null");
            }
            this.Fees = fees;
        }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", IsRequired = true, EmitDefaultValue = true)]
        public MarketPriceDetailsToken Token { get; set; }

        /// <summary>
        /// The token amount value. This value is provided in the smallest unit of the token (e.g. wei for ETH)
        /// </summary>
        /// <value>The token amount value. This value is provided in the smallest unit of the token (e.g. wei for ETH)</value>
        /// <example>9750000000000000000</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// The token amount value. This value is provided in the smallest unit of the token (e.g. wei for ETH)
        /// </summary>
        /// <value>The token amount value. This value is provided in the smallest unit of the token (e.g. wei for ETH)</value>
        /// <example>9750000000000000000</example>
        [DataMember(Name = "fee_inclusive_amount", IsRequired = true, EmitDefaultValue = true)]
        public string FeeInclusiveAmount { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        /// <example>[{&quot;type&quot;:&quot;TAKER_ECOSYSTEM&quot;,&quot;recipient_address&quot;:&quot;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233&quot;,&quot;amount&quot;:&quot;1000000000000000000&quot;}]</example>
        [DataMember(Name = "fees", IsRequired = true, EmitDefaultValue = true)]
        public List<MarketPriceFees> Fees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketPriceDetails {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  FeeInclusiveAmount: ").Append(FeeInclusiveAmount).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
