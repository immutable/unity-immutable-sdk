/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// Listing
    /// </summary>
    [DataContract(Name = "Listing")]
    public partial class Listing
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Listing" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Listing() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Listing" /> class.
        /// </summary>
        /// <param name="listingId">Global Order identifier (required).</param>
        /// <param name="priceDetails">priceDetails (required).</param>
        /// <param name="convertedPrices">A mapping of converted prices for major currencies such as ETH, USD. All converted prices are fee-inclusive. (required).</param>
        /// <param name="tokenId">Token ID (required).</param>
        /// <param name="contractAddress">ETH Address of collection that the asset belongs to (required).</param>
        /// <param name="creator">ETH Address of listing creator (required).</param>
        /// <param name="amount">Amount of token included in the listing (required).</param>
        public Listing(string listingId = default(string), MarketPriceDetails priceDetails = default(MarketPriceDetails), Dictionary<string, string> convertedPrices = default(Dictionary<string, string>), string tokenId = default(string), string contractAddress = default(string), string creator = default(string), string amount = default(string))
        {
            // to ensure "listingId" is required (not null)
            if (listingId == null)
            {
                throw new ArgumentNullException("listingId is a required property for Listing and cannot be null");
            }
            this.ListingId = listingId;
            // to ensure "priceDetails" is required (not null)
            if (priceDetails == null)
            {
                throw new ArgumentNullException("priceDetails is a required property for Listing and cannot be null");
            }
            this.PriceDetails = priceDetails;
            // to ensure "convertedPrices" is required (not null)
            if (convertedPrices == null)
            {
                throw new ArgumentNullException("convertedPrices is a required property for Listing and cannot be null");
            }
            this.ConvertedPrices = convertedPrices;
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for Listing and cannot be null");
            }
            this.TokenId = tokenId;
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new ArgumentNullException("contractAddress is a required property for Listing and cannot be null");
            }
            this.ContractAddress = contractAddress;
            // to ensure "creator" is required (not null)
            if (creator == null)
            {
                throw new ArgumentNullException("creator is a required property for Listing and cannot be null");
            }
            this.Creator = creator;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for Listing and cannot be null");
            }
            this.Amount = amount;
        }

        /// <summary>
        /// Global Order identifier
        /// </summary>
        /// <value>Global Order identifier</value>
        /// <example>018792C9-4AD7-8EC4-4038-9E05C598534A</example>
        [DataMember(Name = "listing_id", IsRequired = true, EmitDefaultValue = true)]
        public string ListingId { get; set; }

        /// <summary>
        /// Gets or Sets PriceDetails
        /// </summary>
        [DataMember(Name = "price_details", IsRequired = true, EmitDefaultValue = true)]
        public MarketPriceDetails PriceDetails { get; set; }

        /// <summary>
        /// A mapping of converted prices for major currencies such as ETH, USD. All converted prices are fee-inclusive.
        /// </summary>
        /// <value>A mapping of converted prices for major currencies such as ETH, USD. All converted prices are fee-inclusive.</value>
        /// <example>{&quot;ETH&quot;:&quot;0.0058079775&quot;,&quot;USD&quot;:&quot;15.89&quot;}</example>
        [DataMember(Name = "converted_prices", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> ConvertedPrices { get; set; }

        /// <summary>
        /// Token ID
        /// </summary>
        /// <value>Token ID</value>
        /// <example>1</example>
        [DataMember(Name = "token_id", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// ETH Address of collection that the asset belongs to
        /// </summary>
        /// <value>ETH Address of collection that the asset belongs to</value>
        /// <example>0xe9b00a87700f660e46b6f5deaa1232836bcc07d3</example>
        [DataMember(Name = "contract_address", IsRequired = true, EmitDefaultValue = true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// ETH Address of listing creator
        /// </summary>
        /// <value>ETH Address of listing creator</value>
        /// <example>0xe9b00a87700f660e46b6f5deaa1232836bcc07d3</example>
        [DataMember(Name = "creator", IsRequired = true, EmitDefaultValue = true)]
        public string Creator { get; set; }

        /// <summary>
        /// Amount of token included in the listing
        /// </summary>
        /// <value>Amount of token included in the listing</value>
        /// <example>1</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Listing {\n");
            sb.Append("  ListingId: ").Append(ListingId).Append("\n");
            sb.Append("  PriceDetails: ").Append(PriceDetails).Append("\n");
            sb.Append("  ConvertedPrices: ").Append(ConvertedPrices).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
