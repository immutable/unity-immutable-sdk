/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// FulfillableOrder
    /// </summary>
    [DataContract(Name = "FulfillableOrder")]
    public partial class FulfillableOrder
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillableOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillableOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillableOrder" /> class.
        /// </summary>
        /// <param name="order">order (required).</param>
        /// <param name="tokenId">Token ID for the ERC721 or ERC1155 token when fulfilling a collection order.</param>
        /// <param name="extraData">extraData (required).</param>
        public FulfillableOrder(Order order = default(Order), string tokenId = default(string), string extraData = default(string))
        {
            // to ensure "order" is required (not null)
            if (order == null)
            {
                throw new ArgumentNullException("order is a required property for FulfillableOrder and cannot be null");
            }
            this.Order = order;
            // to ensure "extraData" is required (not null)
            if (extraData == null)
            {
                throw new ArgumentNullException("extraData is a required property for FulfillableOrder and cannot be null");
            }
            this.ExtraData = extraData;
            this.TokenId = tokenId;
        }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", IsRequired = true, EmitDefaultValue = true)]
        public Order Order { get; set; }

        /// <summary>
        /// Token ID for the ERC721 or ERC1155 token when fulfilling a collection order
        /// </summary>
        /// <value>Token ID for the ERC721 or ERC1155 token when fulfilling a collection order</value>
        /// <example>123</example>
        [DataMember(Name = "token_id", EmitDefaultValue = false)]
        public string TokenId { get; set; }

        /// <summary>
        /// Gets or Sets ExtraData
        /// </summary>
        [DataMember(Name = "extra_data", IsRequired = true, EmitDefaultValue = true)]
        public string ExtraData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillableOrder {\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
