/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// Stack
    /// </summary>
    [DataContract(Name = "NFTWithStack")]
    public partial class NFTWithStack
    {

        /// <summary>
        /// Gets or Sets ContractType
        /// </summary>
        [DataMember(Name = "contract_type", IsRequired = true, EmitDefaultValue = true)]
        public MarketplaceContractType ContractType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NFTWithStack" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NFTWithStack() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NFTWithStack" /> class.
        /// </summary>
        /// <param name="tokenId">Token id of NFT (uint256 as string) (required).</param>
        /// <param name="stackId">Stack ID (required).</param>
        /// <param name="chain">chain (required).</param>
        /// <param name="contractAddress">Contract address (required).</param>
        /// <param name="contractType">contractType (required).</param>
        /// <param name="createdAt">When the metadata was created (required).</param>
        /// <param name="updatedAt">When the metadata was last updated (required).</param>
        /// <param name="name">The name of the NFT (required).</param>
        /// <param name="description">The description of the NFT (required).</param>
        /// <param name="image">The image url of the NFT (required).</param>
        /// <param name="externalUrl">The external website link of NFT (required).</param>
        /// <param name="animationUrl">The animation url of the NFT (required).</param>
        /// <param name="youtubeUrl">The youtube URL of NFT (required).</param>
        /// <param name="attributes">List of Metadata attributes (required).</param>
        /// <param name="balance">Balance of NFT (required).</param>
        public NFTWithStack(string tokenId = default(string), Guid stackId = default(Guid), Chain chain = default(Chain), string contractAddress = default(string), MarketplaceContractType contractType = default(MarketplaceContractType), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), string name = default(string), string description = default(string), string image = default(string), string externalUrl = default(string), string animationUrl = default(string), string youtubeUrl = default(string), List<NFTMetadataAttribute> attributes = default(List<NFTMetadataAttribute>), int? balance = default(int?))
        {
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for NFTWithStack and cannot be null");
            }
            this.TokenId = tokenId;
            this.StackId = stackId;
            // to ensure "chain" is required (not null)
            if (chain == null)
            {
                throw new ArgumentNullException("chain is a required property for NFTWithStack and cannot be null");
            }
            this.Chain = chain;
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new ArgumentNullException("contractAddress is a required property for NFTWithStack and cannot be null");
            }
            this.ContractAddress = contractAddress;
            this.ContractType = contractType;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for NFTWithStack and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for NFTWithStack and cannot be null");
            }
            this.Description = description;
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new ArgumentNullException("image is a required property for NFTWithStack and cannot be null");
            }
            this.Image = image;
            // to ensure "externalUrl" is required (not null)
            if (externalUrl == null)
            {
                throw new ArgumentNullException("externalUrl is a required property for NFTWithStack and cannot be null");
            }
            this.ExternalUrl = externalUrl;
            // to ensure "animationUrl" is required (not null)
            if (animationUrl == null)
            {
                throw new ArgumentNullException("animationUrl is a required property for NFTWithStack and cannot be null");
            }
            this.AnimationUrl = animationUrl;
            // to ensure "youtubeUrl" is required (not null)
            if (youtubeUrl == null)
            {
                throw new ArgumentNullException("youtubeUrl is a required property for NFTWithStack and cannot be null");
            }
            this.YoutubeUrl = youtubeUrl;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for NFTWithStack and cannot be null");
            }
            this.Attributes = attributes;
            // to ensure "balance" is required (not null)
            if (balance == null)
            {
                throw new ArgumentNullException("balance is a required property for NFTWithStack and cannot be null");
            }
            this.Balance = balance;
        }

        /// <summary>
        /// Token id of NFT (uint256 as string)
        /// </summary>
        /// <value>Token id of NFT (uint256 as string)</value>
        [DataMember(Name = "token_id", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// Stack ID
        /// </summary>
        /// <value>Stack ID</value>
        [DataMember(Name = "stack_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid StackId { get; set; }

        /// <summary>
        /// Gets or Sets Chain
        /// </summary>
        [DataMember(Name = "chain", IsRequired = true, EmitDefaultValue = true)]
        public Chain Chain { get; set; }

        /// <summary>
        /// Contract address
        /// </summary>
        /// <value>Contract address</value>
        [DataMember(Name = "contract_address", IsRequired = true, EmitDefaultValue = true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// When the metadata was created
        /// </summary>
        /// <value>When the metadata was created</value>
        /// <example>2022-08-16T17:43:26.991388Z</example>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// When the metadata was last updated
        /// </summary>
        /// <value>When the metadata was last updated</value>
        /// <example>2022-08-16T17:43:26.991388Z</example>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// The name of the NFT
        /// </summary>
        /// <value>The name of the NFT</value>
        /// <example>Sword</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the NFT
        /// </summary>
        /// <value>The description of the NFT</value>
        /// <example>2022-08-16T17:43:26.991388Z</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The image url of the NFT
        /// </summary>
        /// <value>The image url of the NFT</value>
        /// <example>https://some-url</example>
        [DataMember(Name = "image", IsRequired = true, EmitDefaultValue = true)]
        public string Image { get; set; }

        /// <summary>
        /// The external website link of NFT
        /// </summary>
        /// <value>The external website link of NFT</value>
        /// <example>https://some-url</example>
        [DataMember(Name = "external_url", IsRequired = true, EmitDefaultValue = true)]
        public string ExternalUrl { get; set; }

        /// <summary>
        /// The animation url of the NFT
        /// </summary>
        /// <value>The animation url of the NFT</value>
        /// <example>https://some-url</example>
        [DataMember(Name = "animation_url", IsRequired = true, EmitDefaultValue = true)]
        public string AnimationUrl { get; set; }

        /// <summary>
        /// The youtube URL of NFT
        /// </summary>
        /// <value>The youtube URL of NFT</value>
        /// <example>https://some-url</example>
        [DataMember(Name = "youtube_url", IsRequired = true, EmitDefaultValue = true)]
        public string YoutubeUrl { get; set; }

        /// <summary>
        /// List of Metadata attributes
        /// </summary>
        /// <value>List of Metadata attributes</value>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public List<NFTMetadataAttribute> Attributes { get; set; }

        /// <summary>
        /// Balance of NFT
        /// </summary>
        /// <value>Balance of NFT</value>
        [DataMember(Name = "balance", IsRequired = true, EmitDefaultValue = true)]
        public int? Balance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NFTWithStack {\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  StackId: ").Append(StackId).Append("\n");
            sb.Append("  Chain: ").Append(Chain).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ExternalUrl: ").Append(ExternalUrl).Append("\n");
            sb.Append("  AnimationUrl: ").Append(AnimationUrl).Append("\n");
            sb.Append("  YoutubeUrl: ").Append(YoutubeUrl).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
