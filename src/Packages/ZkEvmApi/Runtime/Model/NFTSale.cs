/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// The NFT Sale activity details
    /// </summary>
    [DataContract(Name = "NFTSale")]
    public partial class NFTSale
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NFTSale" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NFTSale() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NFTSale" /> class.
        /// </summary>
        /// <param name="orderId">The id of order (required).</param>
        /// <param name="to">The account address of buyer (required).</param>
        /// <param name="from">The account address of seller (required).</param>
        /// <param name="asset">asset (required).</param>
        /// <param name="payment">payment (required).</param>
        public NFTSale(string orderId = default(string), string to = default(string), string from = default(string), List<ActivityNFT> asset = default(List<ActivityNFT>), SalePayment payment = default(SalePayment))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for NFTSale and cannot be null");
            }
            this.OrderId = orderId;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for NFTSale and cannot be null");
            }
            this.To = to;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for NFTSale and cannot be null");
            }
            this.From = from;
            // to ensure "asset" is required (not null)
            if (asset == null)
            {
                throw new ArgumentNullException("asset is a required property for NFTSale and cannot be null");
            }
            this.Asset = asset;
            // to ensure "payment" is required (not null)
            if (payment == null)
            {
                throw new ArgumentNullException("payment is a required property for NFTSale and cannot be null");
            }
            this.Payment = payment;
        }

        /// <summary>
        /// The id of order
        /// </summary>
        /// <value>The id of order</value>
        /// <example>ARZ3NDEKTSV4RRFFQ69G5FAV</example>
        [DataMember(Name = "order_id", IsRequired = true, EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// The account address of buyer
        /// </summary>
        /// <value>The account address of buyer</value>
        /// <example>0xe9b00a87700f660e46b6f5deaa1232836bcc07d3</example>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// The account address of seller
        /// </summary>
        /// <value>The account address of seller</value>
        /// <example>0xbD6cFcf93474De653d7B42b346c7c25d1F9c559C</example>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "asset", IsRequired = true, EmitDefaultValue = true)]
        public List<ActivityNFT> Asset { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name = "payment", IsRequired = true, EmitDefaultValue = true)]
        public SalePayment Payment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NFTSale {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
