/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// SaleFee
    /// </summary>
    [DataContract(Name = "SaleFee")]
    public partial class SaleFee
    {
        /// <summary>
        /// Fee type
        /// </summary>
        /// <value>Fee type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ROYALTY for value: ROYALTY
            /// </summary>
            [EnumMember(Value = "ROYALTY")]
            ROYALTY = 1
        }


        /// <summary>
        /// Fee type
        /// </summary>
        /// <value>Fee type</value>
        /// <example>ROYALTY</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SaleFee" /> class.
        /// </summary>
        /// <param name="amount">Fee payable to recipient upon settlement.</param>
        /// <param name="type">Fee type.</param>
        /// <param name="recipient">Wallet address of fee recipient.</param>
        public SaleFee(string amount = default(string), TypeEnum? type = default(TypeEnum?), string recipient = default(string))
        {
            this.Amount = amount;
            this.Type = type;
            this.Recipient = recipient;
        }

        /// <summary>
        /// Fee payable to recipient upon settlement
        /// </summary>
        /// <value>Fee payable to recipient upon settlement</value>
        /// <example>200</example>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Wallet address of fee recipient
        /// </summary>
        /// <value>Wallet address of fee recipient</value>
        /// <example>0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233</example>
        [DataMember(Name = "recipient", EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SaleFee {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
