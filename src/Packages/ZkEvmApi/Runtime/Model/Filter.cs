/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// Filter
    /// </summary>
    [DataContract(Name = "Filter")]
    public partial class Filter
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Filter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Filter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Filter" /> class.
        /// </summary>
        /// <param name="name">Name of trait (required).</param>
        /// <param name="values">List of 100 most common values for this trait sorted by number of associated NFTs (required).</param>
        /// <param name="omittedValuesCount">Indicated how many more distinct values exist (required).</param>
        public Filter(string name = default(string), List<FilterValue> values = default(List<FilterValue>), int omittedValuesCount = default(int))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Filter and cannot be null");
            }
            this.Name = name;
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new ArgumentNullException("values is a required property for Filter and cannot be null");
            }
            this.Values = values;
            this.OmittedValuesCount = omittedValuesCount;
        }

        /// <summary>
        /// Name of trait
        /// </summary>
        /// <value>Name of trait</value>
        /// <example>Rarity</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// List of 100 most common values for this trait sorted by number of associated NFTs
        /// </summary>
        /// <value>List of 100 most common values for this trait sorted by number of associated NFTs</value>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = true)]
        public List<FilterValue> Values { get; set; }

        /// <summary>
        /// Indicated how many more distinct values exist
        /// </summary>
        /// <value>Indicated how many more distinct values exist</value>
        /// <example>0</example>
        [DataMember(Name = "omitted_values_count", IsRequired = true, EmitDefaultValue = true)]
        public int OmittedValuesCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Filter {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  OmittedValuesCount: ").Append(OmittedValuesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
