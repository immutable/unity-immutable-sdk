/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// The verification request (internal)
    /// </summary>
    [DataContract(Name = "VerificationRequestInternal")]
    public partial class VerificationRequestInternal
    {

        /// <summary>
        /// Gets or Sets ContractType
        /// </summary>
        [DataMember(Name = "contract_type", IsRequired = true, EmitDefaultValue = true)]
        public VerificationRequestContractType ContractType { get; set; }

        /// <summary>
        /// Gets or Sets VerificationRequestStatus
        /// </summary>
        [DataMember(Name = "verification_request_status", IsRequired = true, EmitDefaultValue = true)]
        public VerificationRequestStatus VerificationRequestStatus { get; set; }

        /// <summary>
        /// Gets or Sets OrgTier
        /// </summary>
        [DataMember(Name = "org_tier", IsRequired = true, EmitDefaultValue = true)]
        public OrganisationTier OrgTier { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationRequestInternal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VerificationRequestInternal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationRequestInternal" /> class.
        /// </summary>
        /// <param name="id">The id of the verification request (required).</param>
        /// <param name="chain">chain (required).</param>
        /// <param name="contractAddress">The contract address (required).</param>
        /// <param name="orgName">The name of the organisation associated with this contract (required).</param>
        /// <param name="name">The name of the collection (required).</param>
        /// <param name="symbol">The symbol of contract (required).</param>
        /// <param name="description">The description of collection (required).</param>
        /// <param name="orgId">The id of the organisation associated with this contract (required).</param>
        /// <param name="requesterEmail">The email address of the user who requested the contract to be verified (required).</param>
        /// <param name="contractType">contractType (required).</param>
        /// <param name="verificationRequestStatus">verificationRequestStatus (required).</param>
        /// <param name="orgTier">orgTier (required).</param>
        public VerificationRequestInternal(Guid id = default(Guid), Chain chain = default(Chain), string contractAddress = default(string), string orgName = default(string), string name = default(string), string symbol = default(string), string description = default(string), string orgId = default(string), string requesterEmail = default(string), VerificationRequestContractType contractType = default(VerificationRequestContractType), VerificationRequestStatus verificationRequestStatus = default(VerificationRequestStatus), OrganisationTier orgTier = default(OrganisationTier))
        {
            this.Id = id;
            // to ensure "chain" is required (not null)
            if (chain == null)
            {
                throw new ArgumentNullException("chain is a required property for VerificationRequestInternal and cannot be null");
            }
            this.Chain = chain;
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new ArgumentNullException("contractAddress is a required property for VerificationRequestInternal and cannot be null");
            }
            this.ContractAddress = contractAddress;
            // to ensure "orgName" is required (not null)
            if (orgName == null)
            {
                throw new ArgumentNullException("orgName is a required property for VerificationRequestInternal and cannot be null");
            }
            this.OrgName = orgName;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for VerificationRequestInternal and cannot be null");
            }
            this.Name = name;
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new ArgumentNullException("symbol is a required property for VerificationRequestInternal and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for VerificationRequestInternal and cannot be null");
            }
            this.Description = description;
            // to ensure "orgId" is required (not null)
            if (orgId == null)
            {
                throw new ArgumentNullException("orgId is a required property for VerificationRequestInternal and cannot be null");
            }
            this.OrgId = orgId;
            // to ensure "requesterEmail" is required (not null)
            if (requesterEmail == null)
            {
                throw new ArgumentNullException("requesterEmail is a required property for VerificationRequestInternal and cannot be null");
            }
            this.RequesterEmail = requesterEmail;
            this.ContractType = contractType;
            this.VerificationRequestStatus = verificationRequestStatus;
            this.OrgTier = orgTier;
        }

        /// <summary>
        /// The id of the verification request
        /// </summary>
        /// <value>The id of the verification request</value>
        /// <example>4e28df8d-f65c-4c11-ba04-6a9dd47b179b</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Chain
        /// </summary>
        [DataMember(Name = "chain", IsRequired = true, EmitDefaultValue = true)]
        public Chain Chain { get; set; }

        /// <summary>
        /// The contract address
        /// </summary>
        /// <value>The contract address</value>
        /// <example>0x8a90cab2b38dba80c64b7734e58ee1db38b8992e</example>
        [DataMember(Name = "contract_address", IsRequired = true, EmitDefaultValue = true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// The name of the organisation associated with this contract
        /// </summary>
        /// <value>The name of the organisation associated with this contract</value>
        /// <example>Immutable</example>
        [DataMember(Name = "org_name", IsRequired = true, EmitDefaultValue = true)]
        public string OrgName { get; set; }

        /// <summary>
        /// The name of the collection
        /// </summary>
        /// <value>The name of the collection</value>
        /// <example>0x8a90cab2b38dba80c64b7734e58ee1db38b8992e</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of contract
        /// </summary>
        /// <value>The symbol of contract</value>
        /// <example>BASP</example>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// The description of collection
        /// </summary>
        /// <value>The description of collection</value>
        /// <example>Some description</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The id of the organisation associated with this contract
        /// </summary>
        /// <value>The id of the organisation associated with this contract</value>
        /// <example>753da67a-5d3b-42c7-b87a-eba3d17a6362</example>
        [DataMember(Name = "org_id", IsRequired = true, EmitDefaultValue = true)]
        public string OrgId { get; set; }

        /// <summary>
        /// The email address of the user who requested the contract to be verified
        /// </summary>
        /// <value>The email address of the user who requested the contract to be verified</value>
        /// <example>user@immutable.com</example>
        [DataMember(Name = "requester_email", IsRequired = true, EmitDefaultValue = true)]
        public string RequesterEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerificationRequestInternal {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Chain: ").Append(Chain).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  OrgName: ").Append(OrgName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  RequesterEmail: ").Append(RequesterEmail).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  VerificationRequestStatus: ").Append(VerificationRequestStatus).Append("\n");
            sb.Append("  OrgTier: ").Append(OrgTier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
