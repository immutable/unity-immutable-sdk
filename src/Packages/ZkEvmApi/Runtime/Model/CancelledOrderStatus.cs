/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// CancelledOrderStatus
    /// </summary>
    [DataContract(Name = "CancelledOrderStatus")]
    public partial class CancelledOrderStatus
    {
        /// <summary>
        /// The order status indicating a order is has been cancelled or about to be cancelled.
        /// </summary>
        /// <value>The order status indicating a order is has been cancelled or about to be cancelled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 1
        }


        /// <summary>
        /// The order status indicating a order is has been cancelled or about to be cancelled.
        /// </summary>
        /// <value>The order status indicating a order is has been cancelled or about to be cancelled.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public NameEnum Name { get; set; }
        /// <summary>
        /// Whether the cancellation was done on-chain or off-chain or as a result of an underfunded account
        /// </summary>
        /// <value>Whether the cancellation was done on-chain or off-chain or as a result of an underfunded account</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CancellationTypeEnum
        {
            /// <summary>
            /// Enum ONCHAIN for value: ON_CHAIN
            /// </summary>
            [EnumMember(Value = "ON_CHAIN")]
            ONCHAIN = 1,

            /// <summary>
            /// Enum OFFCHAIN for value: OFF_CHAIN
            /// </summary>
            [EnumMember(Value = "OFF_CHAIN")]
            OFFCHAIN = 2,

            /// <summary>
            /// Enum UNDERFUNDED for value: UNDERFUNDED
            /// </summary>
            [EnumMember(Value = "UNDERFUNDED")]
            UNDERFUNDED = 3
        }


        /// <summary>
        /// Whether the cancellation was done on-chain or off-chain or as a result of an underfunded account
        /// </summary>
        /// <value>Whether the cancellation was done on-chain or off-chain or as a result of an underfunded account</value>
        /// <example>ON_CHAIN</example>
        [DataMember(Name = "cancellation_type", IsRequired = true, EmitDefaultValue = true)]
        public CancellationTypeEnum CancellationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelledOrderStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CancelledOrderStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelledOrderStatus" /> class.
        /// </summary>
        /// <param name="name">The order status indicating a order is has been cancelled or about to be cancelled. (required).</param>
        /// <param name="pending">Whether the cancellation of the order is pending (required).</param>
        /// <param name="cancellationType">Whether the cancellation was done on-chain or off-chain or as a result of an underfunded account (required).</param>
        public CancelledOrderStatus(NameEnum name = default(NameEnum), bool pending = default(bool), CancellationTypeEnum cancellationType = default(CancellationTypeEnum))
        {
            this.Name = name;
            this.Pending = pending;
            this.CancellationType = cancellationType;
        }

        /// <summary>
        /// Whether the cancellation of the order is pending
        /// </summary>
        /// <value>Whether the cancellation of the order is pending</value>
        /// <example>false</example>
        [DataMember(Name = "pending", IsRequired = true, EmitDefaultValue = true)]
        public bool Pending { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CancelledOrderStatus {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  CancellationType: ").Append(CancellationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
