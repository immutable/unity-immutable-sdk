/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// UnfulfillableOrder
    /// </summary>
    [DataContract(Name = "UnfulfillableOrder")]
    public partial class UnfulfillableOrder
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnfulfillableOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnfulfillableOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnfulfillableOrder" /> class.
        /// </summary>
        /// <param name="orderId">OrderID for the requested but unfulfillable order (required).</param>
        /// <param name="tokenId">Token ID for the ERC721 or ERC1155 token when fulfilling a collection order.</param>
        /// <param name="reason">Nullable string containing error reason if the signing is unsuccessful for the order (required).</param>
        public UnfulfillableOrder(string orderId = default(string), string tokenId = default(string), string reason = default(string))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for UnfulfillableOrder and cannot be null");
            }
            this.OrderId = orderId;
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new ArgumentNullException("reason is a required property for UnfulfillableOrder and cannot be null");
            }
            this.Reason = reason;
            this.TokenId = tokenId;
        }

        /// <summary>
        /// OrderID for the requested but unfulfillable order
        /// </summary>
        /// <value>OrderID for the requested but unfulfillable order</value>
        /// <example>7df3e99e-f7b3-459c-bef6-ffb66a18bb59</example>
        [DataMember(Name = "order_id", IsRequired = true, EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Token ID for the ERC721 or ERC1155 token when fulfilling a collection order
        /// </summary>
        /// <value>Token ID for the ERC721 or ERC1155 token when fulfilling a collection order</value>
        /// <example>123</example>
        [DataMember(Name = "token_id", EmitDefaultValue = false)]
        public string TokenId { get; set; }

        /// <summary>
        /// Nullable string containing error reason if the signing is unsuccessful for the order
        /// </summary>
        /// <value>Nullable string containing error reason if the signing is unsuccessful for the order</value>
        /// <example>Invalid order status INACTIVE for order 7df3e99e-f7b3-459c-bef6-ffb66a18bb59</example>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnfulfillableOrder {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
